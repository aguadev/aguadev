#!/usr/bin/perl -w

=head2

APPLICATION 	receive

PURPOSE

	1. Receive queues from a RabbitMQ queue
	
HISTORY

	v0.01	Basic options to authenticate user and specify queue name

USAGE

$0 [--user String] [--host String] [--password String] [--vhost String] [--queue String]

EXAMPLE

# Receive queues sent to queue 'my.queue.name'
./receive --queue "my.queue.name"

=cut

#### EXTERNAL MODULES
use Term::ANSIColor qw(:constants);
use Getopt::Long;
use FindBin qw($Bin);
use AnyEvent;
use Net::RabbitFoot;

#### USE LIBRARY
use lib "$Bin/../../lib";
BEGIN {
    my $installdir = $ENV{'installdir'} || "/agua";
    unshift(@INC, "$installdir/lib");
}

my $installdir 	=	 $ENV{'installdir'} || "/agua";

#### INTERNAL MODULES
use Conf::Yaml;

my $configfile	=	"$installdir/conf/config.yaml";

my $conf = Conf::Yaml->new(
    memory      =>  1,
    inputfile   =>  $configfile,
);

my $key			=	"topic.default.key";
my $host		=	$conf->getKey("queue:host", undef);
my $port		=	$conf->getKey("queue:port", undef);
my $user		=	$conf->getKey("queue:user", undef);
my $pass		=	$conf->getKey("queue:pass", undef);
my $vhost		=	$conf->getKey("queue:vhost", undef);
my $exchange	=	$conf->getKey("queue:topicexchange", undef);
my $help;

GetOptions (
    'key=s'			=> \$key,
    'exchange=s'	=> \$exchange,
    'host=s'		=> \$host,
    'port=s'		=> \$port,
    'user=s'		=> \$user,
    'pass=s'		=> \$pass,
    'vhost=s'		=> \$vhost,
    'help'          => \$help
) or die "No options specified. Try '--help'\n";
usage() if defined $help;

my $conn = Net::RabbitFoot->new()->load_xml_spec()->connect(
    host 	=> 	$host,
    port 	=> 	5672,
    user 	=> 	$user,
    pass 	=> 	$pass,
    vhost 	=> 	$vhost,
);

my $channel = $conn->open_channel();

$channel->declare_exchange(
    exchange => $exchange,
    type => 'topic',
);

my $result = $channel->declare_queue(
	exclusive => 1
);

my $queuename = $result->{method_frame}->{queue};
print "queue name: $queuename\n";

$channel->bind_queue(
	exchange    => 	$exchange,
	queue       => 	$queuename,
	routing_key => 	$key,
);

print " [*] Waiting for messages to routing key '$key'. To exit press CTRL-C\n";

sub callback {
    my $var = shift;
    my $body = $var->{body}->{payload};
    my $routing_key = $var->{deliver}->{method_frame}->{routing_key};
    print " [x] $routing_key:$body\n";
}

$channel->consume(
    on_consume => \&callback,
    no_ack => 1,
);

# Wait forever
AnyEvent->condvar->recv;

exit 0;

##############################################################

sub usage {
	print `perldoc $0`;
	exit;
}

