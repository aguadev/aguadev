.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::AMQP 3"
.TH Net::AMQP 3 "2014-04-08" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::AMQP \- Advanced Message Queue Protocol (de)serialization and representation
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Net::AMQP;
\&
\&  Net::AMQP::Protocol\->load_xml_spec(\*(Aqamqp0\-8.xml\*(Aq);
\&
\&  ...
\&
\&  my @frames = Net::AMQP\->parse_raw_frames(\e$input);
\&  
\&  ...
\&
\&  foreach my $frame (@frames) {
\&      if ($frame\->can(\*(Aqmethod_frame\*(Aq) && $frame\->method_frame\->isa(\*(AqNet::AMQP::Protocol::Connection::Start\*(Aq)) {
\&          my $output = Net::AMQP::Frame::Method\->new(
\&              channel => 0,
\&              method_frame => Net::AMQP::Protocol::Connection::StartOk\->new(
\&                  client_properties => { ... },
\&                  mechanism         => \*(AqAMQPLAIN\*(Aq,
\&                  locale            => \*(Aqen_US\*(Aq,
\&                  response          => {
\&                      LOGIN    => \*(Aqguest\*(Aq,
\&                      PASSWORD => \*(Aqguest\*(Aq,
\&                  },
\&              ),
\&          );
\&          print OUT $output\->to_raw_frame();
\&      }
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module implements the frame (de)serialization and representation of the Advanced Message Queue Protocol (http://www.amqp.org/).  It is to be used in conjunction with client or server software that does the actual \s-1TCP/IP\s0 communication.
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
.SS "parse_raw_frames"
.IX Subsection "parse_raw_frames"
.Vb 1
\&  Net::AMQP\->parse_raw_frames(\e$binary_payload)
.Ve
.PP
Given a scalar reference to a binary string, return a list of Net::AMQP::Frame objects, consuming the data in the string.  Croaks on invalid input.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Net::AMQP::Value, Net::RabbitMQ, AnyEvent::RabbitMQ,
Net::RabbitFoot, POE::Component::Client::AMQP
.SH "AMQP VERSIONS"
.IX Header "AMQP VERSIONS"
\&\s-1AMQP\s0 0\-8 is fully supported.
.PP
\&\s-1AMQP\s0 0\-9, 0\-9\-1, and 0\-10 are usably supported.  There are interoperability
issues with table encodings because the standard disagrees with the dialects of
major implementations (RabbitMQ and Qpid).  For now, Net::AMQP limits itself to
universally agreed table elements.  See
http://www.rabbitmq.com/amqp\-0\-9\-1\-errata.html <http://www.rabbitmq.com/amqp-0-9-1-errata.html> for details.
.PP
\&\s-1AMQP\s0 1.0 has not been tested.
.SH "TODO"
.IX Header "TODO"
Address the dialect problem, either via modified spec files that completely
control the wire protocol, or by programmatic request.  The former has
precedent (viz \*(L"qpid.amqp0\-8.xml\*(R" in spec), but could cause a combinatorial explosion
as more brokers and versions are added.  The latter adds interface complexity.
.SH "QUOTES"
.IX Header "QUOTES"
\&\*(L"All problems in computer science can be solved by another level of indirection.\*(R" \*(-- David Wheeler's observation
.PP
\&\*(L"...except for the problem of too many layers of indirection.\*(R" \*(-- Kevlin Henney's corollary
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2009 Eric Waters and XMission \s-1LLC\s0 (http://www.xmission.com/).
Copyright (c) 2012, 2013 Chip Salzenberg and Topsy Labs (http://labs.topsy.com/).
All rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.  The full text of the license can be found in
the \s-1LICENSE\s0 file included with this module.
.SH "AUTHOR"
.IX Header "AUTHOR"
Eric Waters <ewaters@gmail.com>
