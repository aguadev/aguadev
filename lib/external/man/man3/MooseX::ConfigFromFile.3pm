.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MooseX::ConfigFromFile 3pm"
.TH MooseX::ConfigFromFile 3pm "2013-11-30" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MooseX::ConfigFromFile \- An abstract Moose role for setting attributes from a configfile
.SH "VERSION"
.IX Header "VERSION"
version 0.13
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  ########
\&  ## A real role based on this abstract role:
\&  ########
\&
\&  package MooseX::SomeSpecificConfigRole;
\&  use Moose::Role;
\&
\&  with \*(AqMooseX::ConfigFromFile\*(Aq;
\&
\&  use Some::ConfigFile::Loader ();
\&
\&  sub get_config_from_file {
\&    my ($class, $file) = @_;
\&
\&    my $options_hashref = Some::ConfigFile::Loader\->load($file);
\&
\&    return $options_hashref;
\&  }
\&
\&
\&  ########
\&  ## A class that uses it:
\&  ########
\&  package Foo;
\&  use Moose;
\&  with \*(AqMooseX::SomeSpecificConfigRole\*(Aq;
\&
\&  # optionally, default the configfile:
\&  sub _get_default_configfile { \*(Aq/tmp/foo.yaml\*(Aq }
\&
\&  # ... insert your stuff here ...
\&
\&  ########
\&  ## A script that uses the class with a configfile
\&  ########
\&
\&  my $obj = Foo\->new_with_config(configfile => \*(Aq/etc/foo.yaml\*(Aq, other_opt => \*(Aqfoo\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is an abstract role which provides an alternate constructor for creating
objects using parameters passed in from a configuration file.  The
actual implementation of reading the configuration file is left to
concrete sub-roles.
.PP
It declares an attribute \f(CW\*(C`configfile\*(C'\fR and a class method \f(CW\*(C`new_with_config\*(C'\fR,
and requires that concrete roles derived from it implement the class method
\&\f(CW\*(C`get_config_from_file\*(C'\fR.
.PP
Attributes specified directly as arguments to \f(CW\*(C`new_with_config\*(C'\fR supersede those
in the configfile.
.PP
MooseX::Getopt knows about this abstract role, and will use it if available
to load attributes from the file specified by the command line flag \f(CW\*(C`\-\-configfile\*(C'\fR
during its normal \f(CW\*(C`new_with_options\*(C'\fR.
.SH "Attributes"
.IX Header "Attributes"
.SS "configfile"
.IX Subsection "configfile"
This is a Path::Tiny object which can be coerced from a regular path
string or any object that supports stringification.
This is the file your attributes are loaded from.  You can add a default
configfile in the consuming class and it will be honored at the appropriate
time; see below at \*(L"_get_default_configfile\*(R".
.PP
If you have MooseX::Getopt installed, this attribute will also have the
\&\f(CW\*(C`Getopt\*(C'\fR trait supplied, so you can also set the configfile from the
command line.
.SH "Class Methods"
.IX Header "Class Methods"
.SS "new_with_config"
.IX Subsection "new_with_config"
This is an alternate constructor, which knows to look for the \f(CW\*(C`configfile\*(C'\fR option
in its arguments and use that to set attributes.  It is much like MooseX::Getopts's
\&\f(CW\*(C`new_with_options\*(C'\fR.  Example:
.PP
.Vb 1
\&  my $foo = SomeClass\->new_with_config(configfile => \*(Aq/etc/foo.yaml\*(Aq);
.Ve
.PP
Explicit arguments will override anything set by the configfile.
.SS "get_config_from_file"
.IX Subsection "get_config_from_file"
This class method is not implemented in this role, but it is required of all
classes or roles that consume this role.
Its two arguments are the class name and the configfile, and it is expected to return
a hashref of arguments to pass to \f(CW\*(C`new()\*(C'\fR which are sourced from the configfile.
.SS "_get_default_configfile"
.IX Subsection "_get_default_configfile"
This class method is not implemented in this role, but can and should be defined
in a consuming class or role to return the default value of the configfile (if not
passed into the constructor explicitly).
.SH "AUTHOR"
.IX Header "AUTHOR"
Brandon L. Black, <blblack@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2013 by Brandon L. Black.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.IP "\(bu" 4
Brandon L Black <blblack@gmail.com>
.IP "\(bu" 4
Chris Prather <chris@prather.org>
.IP "\(bu" 4
Karen Etheridge <ether@cpan.org>
.IP "\(bu" 4
Tomas Doran <bobtfish@bobtfish.net>
.IP "\(bu" 4
Yuval Kogman <nothingmuch@woobling.org>
