.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Sort 3"
.TH Sort 3 "2002-01-22" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
File::Sort \- Sort a file or merge sort multiple files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&  use File::Sort qw(sort_file);
\&  sort_file({
\&    I => [qw(file_1 file_2)],
\&    o => \*(Aqfile_new\*(Aq, k => \*(Aq5.3,5.5rn\*(Aq, \-t => \*(Aq|\*(Aq
\&  });
\&
\&  sort_file(\*(Aqfile1\*(Aq, \*(Aqfile1.sorted\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module sorts text files by lines (or records).  Comparisons
are based on one or more sort keys extracted from each line of input,
and are performed lexicographically. By default, if keys are not given,
sort regards each input line as a single field.  The sort is a merge
sort.  If you don't like that, feel free to change it.
.SS "Options"
.IX Subsection "Options"
The following options are available, and are passed in the hash
reference passed to the function in the format:
.PP
.Vb 1
\&  OPTION => VALUE
.Ve
.PP
Where an option can take multiple values (like \f(CW\*(C`I\*(C'\fR, \f(CW\*(C`k\*(C'\fR, and \f(CW\*(C`pos\*(C'\fR),
values may be passed via an anonymous array:
.PP
.Vb 1
\&  OPTION => [VALUE1, VALUE2]
.Ve
.PP
Where the \s-1OPTION\s0 is a switch, it should be passed a boolean \s-1VALUE\s0
of 1 or 0.
.PP
This interface will always be supported, though a more perlish
interface may be offered in the future, as well.  This interface
is basically a mapping of the command-line options to the Unix
sort utility.
.ie n .IP """I"" \fI\s-1INPUT\s0\fR" 4
.el .IP "\f(CWI\fR \fI\s-1INPUT\s0\fR" 4
.IX Item "I INPUT"
Pass in the input file(s).  This can be either a single string with the
filename, or an array reference containing multiple filename strings.
.ie n .IP """c""" 4
.el .IP "\f(CWc\fR" 4
.IX Item "c"
Check that single input fle is ordered as specified by the arguments and
the collating sequence of the current locale.  No output is produced;
only the exit code is affected.
.ie n .IP """m""" 4
.el .IP "\f(CWm\fR" 4
.IX Item "m"
Merge only; the input files are assumed to already be sorted.
.ie n .IP """o"" \fI\s-1OUTPUT\s0\fR" 4
.el .IP "\f(CWo\fR \fI\s-1OUTPUT\s0\fR" 4
.IX Item "o OUTPUT"
Specify the name of an \fI\s-1OUTPUT\s0\fR file to be used instead of the standard
output.
.ie n .IP """u""" 4
.el .IP "\f(CWu\fR" 4
.IX Item "u"
Unique: Suppresses all but one in each set of lines having equal keys.
If used with the \fBc\fR option check that there are no lines with
consecutive lines with duplicate keys, in addition to checking that the
input file is sorted.
.ie n .IP """y"" \fI\s-1MAX_SORT_RECORDS\s0\fR" 4
.el .IP "\f(CWy\fR \fI\s-1MAX_SORT_RECORDS\s0\fR" 4
.IX Item "y MAX_SORT_RECORDS"
Maximum number of lines (records) read before writing to temp file.
Default is 200,000. This may eventually change to be kbytes instead of
lines.  Lines was easier to implement.  Can also specify with
\&\s-1MAX_SORT_RECORDS\s0 environment variable.
.ie n .IP """F"" \fI\s-1MAX_SORT_FILES\s0\fR" 4
.el .IP "\f(CWF\fR \fI\s-1MAX_SORT_FILES\s0\fR" 4
.IX Item "F MAX_SORT_FILES"
Maximum number of temp files to be held open at once.  Default to 40,
as older Windows ports had quite a small limit.  Can also specify
with \s-1MAX_SORT_FILES\s0 environment variable.  No temp files will be used
at all if \s-1MAX_SORT_RECORDS\s0 is never reached.
.ie n .IP """D""" 4
.el .IP "\f(CWD\fR" 4
.IX Item "D"
Send debugging information to \s-1STDERR\s0.  Behavior subject to change.
.PP
The following options override the default ordering rules. When ordering
options appear independent of any key field specifications, the requested
field ordering rules are applied globally to all sort keys. When attached
to a specific key (see \fBk\fR), the specified ordering options override all
global ordering options for that key.
.ie n .IP """d""" 4
.el .IP "\f(CWd\fR" 4
.IX Item "d"
Specify that only blank characters and alphanumeric characters,
according to the current locale setting, are significant in comparisons.
\&\fBd\fR overrides \fBi\fR.
.ie n .IP """f""" 4
.el .IP "\f(CWf\fR" 4
.IX Item "f"
Consider all lower-case characters that have upper-case equivalents,
according to the current locale setting, to be the upper-case equivalent
for the purposes of comparison.
.ie n .IP """i""" 4
.el .IP "\f(CWi\fR" 4
.IX Item "i"
Ignores all characters that are non-printable, according to the current
locale setting.
.ie n .IP """n""" 4
.el .IP "\f(CWn\fR" 4
.IX Item "n"
Does numeric instead of string compare, using whatever perl considers to
be a number in numeric comparisons.
.ie n .IP """r""" 4
.el .IP "\f(CWr\fR" 4
.IX Item "r"
Reverse the sense of the comparisons.
.ie n .IP """b""" 4
.el .IP "\f(CWb\fR" 4
.IX Item "b"
Ignore leading blank characters when determining the starting and ending
positions of a restricted sort key.  If the \fBb\fR option is specified
before the first \fBk\fR option, it is applied to all \fBk\fR options. 
Otherwise, the \fBb\fR option can be attached indepently to each
field_start or field_end option argument (see below).
.ie n .IP """t"" \fI\s-1STRING\s0\fR" 4
.el .IP "\f(CWt\fR \fI\s-1STRING\s0\fR" 4
.IX Item "t STRING"
Use \fI\s-1STRING\s0\fR as the field separator character; char is not considered
to be part of a field (although it can be included in a sort key).  Each
occurrence of char is significant (for example,
<char><char> delimits an empty field).  If \fBt\fR is not
specified, blank characters are used as default field separators; each
maximal non-empty sequence of blank characters that follows a non-blank
character is a field separator.
.ie n .IP """X"" \fI\s-1STRING\s0\fR" 4
.el .IP "\f(CWX\fR \fI\s-1STRING\s0\fR" 4
.IX Item "X STRING"
Same as \fBt\fR, but \fI\s-1STRING\s0\fR is interpreted as a Perl regular expression
instead.  Do not escape any characters (\f(CW\*(C`/\*(C'\fR characters need to be
escaped internally, and will be escaped for you).
.Sp
The string matched by \fI\s-1STRING\s0\fR is not included in the fields
themselves, unless demanded by perl's regex and split semantics (e.g.,
regexes in parentheses will add that matched expression as an extra
field).  See perlre and \*(L"split\*(R" in perlfunc.
.ie n .IP """R"" \fI\s-1STRING\s0\fR" 4
.el .IP "\f(CWR\fR \fI\s-1STRING\s0\fR" 4
.IX Item "R STRING"
Record separator, defaults to newline.
.ie n .IP """k"" \fIpos1[,pos2]\fR" 4
.el .IP "\f(CWk\fR \fIpos1[,pos2]\fR" 4
.IX Item "k pos1[,pos2]"
The keydef argument is a restricted sort key field definition. The
format of this definition is:
.Sp
.Vb 1
\&    field_start[.first_char][type][,field_end[.last_char][type]]
.Ve
.Sp
where field_start and field_end define a key field restricted to a
portion of the line, and type is a modifier from the list of characters
\&\fBb\fR, \fBd\fR, \fBf\fR, \fBi\fR, \fBn\fR, \fBr\fR.  The b modifier behaves like the
\&\fBb\fR option, but applies only to the field_start or field_end to which
it is attached. The other modifiers behave like the corresponding
options, but apply only to the key field to which they are attached;
they have this effect if specified with field_start, field_end, or both.
If any modifier is attached to a field_start or a field_end, no option
applies to either.
.Sp
Occurrences of the \fBk\fR option are significant in command line order. 
If no \fBk\fR option is specified, a default sort key of the entire line
is used.  When there are multiple keys fields, later keys are compared
only after all earlier keys compare equal.
.Sp
Except when the \fBu\fR option is specified, lines that otherwise compare
equal are ordered as if none of the options \fBd\fR, \fBf\fR, \fBi\fR, \fBn\fR
or \fBk\fR were present (but with \fBr\fR still in effect, if it was
specified) and with all bytes in the lines significant to the
comparison.  The order in which lines that still compare equal are
written is unspecified.
.ie n .IP """pos"" \fI+pos1 [\-pos2]\fR" 4
.el .IP "\f(CWpos\fR \fI+pos1 [\-pos2]\fR" 4
.IX Item "pos +pos1 [-pos2]"
Similar to \fBk\fR, these are mostly obsolete switches, but some people
like them and want to use them.  Usage is:
.Sp
.Vb 1
\&    +field_start[.first_char][type] [\-field_end[.last_char][type]]
.Ve
.Sp
Where field_end in \fBk\fR specified the last position to be included,
it specifes the last position to \s-1NOT\s0 be included.  Also, numbers
are counted from 0 instead of 1.  \fBpos2\fR must immediately follow
corresponding \fB+pos1\fR.  The rest should be the same as the \fBk\fR option.
.Sp
Mixing \fB+pos1\fR \fBpos2\fR with \fBk\fR is allowed, but will result in all of
the \fB+pos1\fR \fBpos2\fR options being ordered \s-1AFTER\s0 the \fBk\fR options.
It is best if you Don't Do That.  Pick one and stick with it.
.Sp
Here are some equivalencies:
.Sp
.Vb 6
\&    pos => \*(Aq+1 \-2\*(Aq              \->  k => \*(Aq2,2\*(Aq
\&    pos => \*(Aq+1.1 \-1.2\*(Aq          \->  k => \*(Aq2.2,2.2\*(Aq
\&    pos => [\*(Aq+1 \-2\*(Aq, \*(Aq+3 \-5\*(Aq]   \->  k => [\*(Aq2,2\*(Aq, \*(Aq4,5\*(Aq]
\&    pos => [\*(Aq+2\*(Aq, \*(Aq+0b \-1\*(Aq]     \->  k => [\*(Aq3\*(Aq, \*(Aq1b,1\*(Aq]
\&    pos => \*(Aq+2.1 \-2.4\*(Aq          \->  k => \*(Aq3.2,3.4\*(Aq
\&    pos => \*(Aq+2.0 \-3.0\*(Aq          \->  k => \*(Aq3.1,4.0\*(Aq
.Ve
.SS "Not Implemented"
.IX Subsection "Not Implemented"
If the options are not listed as implemented above, or are not
listed in \s-1TODO\s0 below, they are not in the plan for implementation.
This includes \fBT\fR and \fBz\fR.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Sort file by straight string compare of each line, sending
output to \s-1STDOUT\s0.
.PP
.Vb 2
\&    use File::Sort qw(sort_file);
\&    sort_file(\*(Aqfile\*(Aq);
.Ve
.PP
Sort contents of file by second key in file.
.PP
.Vb 1
\&    sort_file({k => 2, I => \*(Aqfile\*(Aq});
.Ve
.PP
Sort, in reverse order, contents of file1 and file2, placing
output in outfile and using second character of second field
as the sort key.
.PP
.Vb 4
\&    sort_file({
\&        r => 1, k => \*(Aq2.2,2.2\*(Aq, o => \*(Aqoutfile\*(Aq,
\&        I => [\*(Aqfile1\*(Aq, \*(Aqfile2\*(Aq]
\&    });
.Ve
.PP
Same sort but sorting numerically on characters 3 through 5 of
the fifth field first, and only return records with unique keys.
.PP
.Vb 4
\&    sort_file({
\&        u => 1, r => 1, k => [\*(Aq5.3,5.5rn\*(Aq, \*(Aq2.2,2.2\*(Aq],
\&        o => \*(Aqoutfile\*(Aq, I => [\*(Aqfile1\*(Aq, \*(Aqfile2\*(Aq]
\&    });
.Ve
.PP
Print \fIpasswd\fR\|(4) file sorted by numeric user \s-1ID\s0.
.PP
.Vb 1
\&    sort_file({t => \*(Aq:\*(Aq, k => \*(Aq3n\*(Aq, I => \*(Aq/etc/passwd\*(Aq});
.Ve
.PP
For the anal sysadmin, check that \fIpasswd\fR\|(4) file is sorted by numeric
user \s-1ID\s0.
.PP
.Vb 1
\&    sort_file({c => 1, t => \*(Aq:\*(Aq, k => \*(Aq3n\*(Aq, I => \*(Aq/etc/passwd\*(Aq});
.Ve
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
Note that if you change the locale settings after the program has started
up, you must call \fIsetlocale()\fR for the new settings to take effect.  For
example:
.PP
.Vb 2
\&    # get constants
\&    use POSIX \*(Aqlocale_h\*(Aq;
\&
\&    # e.g., blank out locale
\&    $ENV{LC_ALL} = $ENV{LANG} = \*(Aq\*(Aq;
\&
\&    # use new ENV settings
\&    setlocale(LC_CTYPE, \*(Aq\*(Aq);
\&    setlocale(LC_COLLATE, \*(Aq\*(Aq);
.Ve
.IP "\s-1LC_COLLATE\s0" 4
.IX Item "LC_COLLATE"
Determine the locale for ordering rules.
.IP "\s-1LC_CTYPE\s0" 4
.IX Item "LC_CTYPE"
Determine the locale for the interpretation of sequences of bytes of
text data as characters (for example, single\- versus multi-byte
characters in arguments and input files) and the behaviour of
character classification for the \fBb\fR, \fBd\fR, \fBf\fR, \fBi\fR and \fBn\fR
options.
.IP "\s-1MAX_SORT_RECORDS\s0" 4
.IX Item "MAX_SORT_RECORDS"
Default is 200,000.  Maximum number of records to use before writing
to a temp file.  Overriden by \fBy\fR option.
.IP "\s-1MAX_SORT_FILES\s0" 4
.IX Item "MAX_SORT_FILES"
Maximum number of open temp files to use before merging open temp
files.  Overriden by \fBF\fR option.
.SH "EXPORT"
.IX Header "EXPORT"
Exports \f(CW\*(C`sort_file\*(C'\fR on request.
.SH "TODO"
.IX Header "TODO"
.IP "Better debugging and error reporting" 4
.IX Item "Better debugging and error reporting"
.PD 0
.IP "Performance hit with \-u" 4
.IX Item "Performance hit with -u"
.IP "Do bytes instead of lines" 4
.IX Item "Do bytes instead of lines"
.IP "Better test suite" 4
.IX Item "Better test suite"
.IP "Switch for turning off locale ... ?" 4
.IX Item "Switch for turning off locale ... ?"
.PD
.SH "HISTORY"
.IX Header "HISTORY"
.IP "v1.01, Monday, January 14, 2002" 4
.IX Item "v1.01, Monday, January 14, 2002"
Change license to be that of Perl.
.IP "v1.00, Tuesday, November 13, 2001" 4
.IX Item "v1.00, Tuesday, November 13, 2001"
Long overdue release.
.Sp
Add O_TRUNC to output open (D'oh!).
.Sp
Played with somem of the \-k options (Marco A. Romero).
.Sp
Fix filehandle close test of \s-1STDOUT\s0 (Gael Marziou).
.Sp
Some cleanup.
.IP "v0.91, Saturday, February 12, 2000" 4
.IX Item "v0.91, Saturday, February 12, 2000"
Closed all files in test.pl so they could be unlinked on some
platforms.  (Hubert Toullec)
.Sp
Documented \f(CW\*(C`I\*(C'\fR option.  (Hubert Toullec)
.Sp
Removed O_EXCL flag from \f(CW\*(C`sort_file\*(C'\fR.
.Sp
Fixed bug in sorting multiple files.  (Paul Eckert)
.IP "v0.90, Friday, April 30, 1999" 4
.IX Item "v0.90, Friday, April 30, 1999"
Complete rewrite.  Took the code from this module to write sort
utility for \s-1PPT\s0 project, then brought changes back over.  As a result
the interface has changed slightly, mostly in regard to what letters
are used for options, but there are also some key behavioral differences.
If you need the old interface, the old module will remain on \s-1CPAN\s0, but
will not be supported.  Sorry for any inconvenience this may cause.
The good news is that it should not be too difficult to update your
code to use the new interface.
.IP "v0.20" 4
.IX Item "v0.20"
Fixed bug with unique option (didn't work :).
.Sp
Switched to sysopen for better portability.
.Sp
Print to \s-1STDOUT\s0 if no output file supplied.
.Sp
Added c option to check sorting.
.IP "v0.18 (31 January 1998)" 4
.IX Item "v0.18 (31 January 1998)"
Tests 3 and 4 failed because we hit the open file limit in the
standard Windows port of perl5.004_02 (50).  Adjusted the default
for total number of temp files from 50 to 40 (leave room for other open
files), changed docs.  (Mike Blazer, Gurusamy Sarathy)
.IP "v0.17 (30 December 1998)" 4
.IX Item "v0.17 (30 December 1998)"
Fixed bug in \f(CW\*(C`_merge_files\*(C'\fR that tried to \f(CW\*(C`open\*(C'\fR a passed
\&\f(CW\*(C`IO::File\*(C'\fR object.
.Sp
Fixed up docs and did some more tests and benchmarks.
.IP "v0.16 (24 December 1998)" 4
.IX Item "v0.16 (24 December 1998)"
One year between releases was too long.  I made changes Miko O'Sullivan
wanted, and I didn't even know I had made them.
.Sp
Also now use \f(CW\*(C`IO::File\*(C'\fR to create temp files, so the \s-1TMPDIR\s0 option is
no longer supported.  Hopefully made the whole thing more robust and
faster, while supporting more options for sorting, including delimited
sorts, and arbitrary sorts.
.Sp
Made \s-1CHUNK\s0 default a lot larger, which improves performance.  On
low-memory systems, or where (e.g.) the MacPerl binary is not allocated
much \s-1RAM\s0, it might need to be lowered.
.IP "v0.11 (04 January 1998)" 4
.IX Item "v0.11 (04 January 1998)"
More cleanup; fixed special case of no linebreak on last line; wrote test 
suite; fixed warning for redefined subs (sort1 and sort2).
.IP "v0.10 (03 January 1998)" 4
.IX Item "v0.10 (03 January 1998)"
Some cleanup; made it not subject to system file limitations; separated 
many parts out into separate functions.
.IP "v0.03 (23 December 1997)" 4
.IX Item "v0.03 (23 December 1997)"
Added reverse and numeric sorting options.
.IP "v0.02 (19 December 1997)" 4
.IX Item "v0.02 (19 December 1997)"
Added unique and merge-only options.
.IP "v0.01 (18 December 1997)" 4
.IX Item "v0.01 (18 December 1997)"
First release.
.SH "THANKS"
.IX Header "THANKS"
Mike Blazer <blazer@mail.nevalink.ru>,
Vicki Brown <vlb@cfcl.com>,
Tom Christiansen <tchrist@perl.com>,
Albert Dvornik <bert@mit.edu>,
Paul Eckert <peckert@epicrealm.com>,
Gene Hsu <gene@moreinfo.com>,
Andrew M. Langmead <aml@world.std.com>,
Gael Marziou <gael_marziou@hp.com>,
Brian L. Matthews <blm@halcyon.com>,
Rich Morin <rdm@cfcl.com>,
Matthias Neeracher <neeri@iis.ee.ethz.ch>,
Miko O'Sullivan <miko@idocs.com>,
Tom Phoneix <rootbeer@teleport.com>,
Marco A. Romero <mromero@iglou.com>,
Gurusamy Sarathy <gsar@activestate.com>,
Hubert Toullec <Hubert.Toullec@wanadoo.fr>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Chris Nandor <pudge@pobox.com>, http://pudge.net/
.PP
Copyright (c) 1997\-2002 Chris Nandor.  All rights reserved.  This program
is free software; you can redistribute it and/or modify it under the same
terms as Perl itself.
.SH "VERSION"
.IX Header "VERSION"
v1.01, Monday, January 14, 2002
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIsort\fR\|(1), locale, \s-1PPT\s0 project, <URL:http://sf.net/projects/ppt/>.
