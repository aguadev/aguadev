.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Method::Signatures::Modifiers 3"
.TH Method::Signatures::Modifiers 3 "2014-04-08" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Method::Signatures::Modifiers \- use Method::Signatures from within MooseX::Declare
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use MooseX::Declare;
\&    use Method::Signatures::Modifiers;
\&
\&    class Foo
\&    {
\&        method bar (Int $thing) {
\&            # this method is declared with Method::Signatures instead of MooseX::Method::Signatures
\&        }
\&    }
\&
\&    # \-\- OR \-\-
\&
\&    use MooseX::Declare;
\&
\&    class My::Declare extends MooseX::Declare
\&    {
\&        use Method::Signatures::Modifiers;
\&    }
\&
\&    # ... later ...
\&
\&    use My::Declare;
\&
\&    class Fizz
\&    {
\&        method baz (Int $thing) {
\&            # this method also declared with Method::Signatures instead of MooseX::Method::Signatures
\&        }
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Allows you to use Method::Signatures from within
MooseX::Declare, both for the \f(CW\*(C`method\*(C'\fR keyword and also for any
method modifiers (\f(CW\*(C`before\*(C'\fR, \f(CW\*(C`after\*(C'\fR, \f(CW\*(C`around\*(C'\fR, \f(CW\*(C`override\*(C'\fR, and
\&\f(CW\*(C`augment\*(C'\fR).  Typically method signatures within MooseX::Declare
are provided by MooseX::Method::Signatures.  Using
Method::Signatures instead provides several advantages:
.IP "\(bu" 4
MooseX::Method::Signatures has a known bug with Perl 5.12.x
which does not plague Method::Signatures.
.IP "\(bu" 4
Method::Signatures may provide substantially better
performance when calling methods, depending on your circumstances.
.IP "\(bu" 4
Method::Signatures error messages are somewhat easier to
read (and can be overridden more easily).
.PP
However, Method::Signatures cannot be considered a drop-in
replacement for MooseX::Method::Signatures.  Specifically, the
following features of MooseX::Method::Signatures are not available
to you (or work differently) if you substitute Method::Signatures:
.PP
\fITypes for Invocants\fR
.IX Subsection "Types for Invocants"
.PP
MooseX::Method::Signatures allows code such as this:
.PP
.Vb 2
\&    method foo (ClassName $class: Int $bar) {
\&    }
.Ve
.PP
Method::Signatures does not allow you to specify a type for the
invocant, so your code would change to:
.PP
.Vb 2
\&    method foo ($class: Int $bar) {
\&    }
.Ve
.PP
\fIParameter Aliasing (Labels)\fR
.IX Subsection "Parameter Aliasing (Labels)"
.PP
MooseX::Method::Signatures allows code like this:
.PP
.Vb 3
\&    # call this as $obj\->foo(bar => $baz)
\&    method foo (Int :bar($baz)) {
\&    }
.Ve
.PP
This feature is not currently planned for Method::Signatures.
.PP
\fIPlaceholders\fR
.IX Subsection "Placeholders"
.PP
MooseX::Method::Signatures allows code like this:
.PP
.Vb 3
\&    method foo (Int $bar, $, Int $baz) {
\&        # second parameter not available as a variable here
\&    }
.Ve
.PP
This feature is not currently planned for Method::Signatures.
.PP
Note that, if the parameter you want to ignore is at the end:
.PP
.Vb 3
\&    method foo (Int $bar, Int $baz, $) {
\&        # third parameter not available as a variable here
\&    }
.Ve
.PP
then you could write that in Method::Signatures using the \*(L"yada
yada\*(R" pseudo-parameter:
.PP
.Vb 3
\&    method foo (Int $bar, Int $baz, ...) {
\&        # third (or greater) parameter(s) not available here
\&    }
.Ve
.PP
\fITraits\fR
.IX Subsection "Traits"
.PP
In MooseX::Method::Signatures, \f(CW\*(C`does\*(C'\fR is a synonym for \f(CW\*(C`is\*(C'\fR.
Method::Signatures does not honor this.
.PP
Method::Signatures supports several traits that
MooseX::Method::Signatures does not.
.PP
MooseX::Method::Signatures supports the \f(CW\*(C`coerce\*(C'\fR trait.
Method::Signatures does not currently support this, although it is
a planned feature for a future release, potentially using the \f(CW\*(C`does
coerce\*(C'\fR syntax.
.SH "BUGS, CAVEATS and NOTES"
.IX Header "BUGS, CAVEATS and NOTES"
Note that although this module causes all calls to
MooseX::Method::Signatures from within MooseX::Declare to be
completely \fIreplaced\fR by calls to Method::Signatures (or calls to
Method::Signatures::Modifiers), MooseX::Method::Signatures is still
\&\fIloaded\fR by MooseX::Declare.  It's just never used.
.PP
The \f(CW\*(C`compile_at_BEGIN\*(C'\fR flag to Method::Signatures is ignored by
Method::Signatures::Modifiers.  This is because parsing at
compile-time can cause method modifiers to be added before the methods
they are modifying are composed into the Moose classes.  Parsing of
methods at run-time is compatible with MooseX::Method::Signatures.
.SH "THANKS"
.IX Header "THANKS"
This code was written by Buddy Burden (barefootcoder).
.PP
The import code for replacing MooseX::Method::Signatures is based
on a suggestion from Nick Perez.
.SH "LICENSE"
.IX Header "LICENSE"
Copyright 2011 by Michael G Schwern <schwern@pobox.com>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
.SH "SEE ALSO"
.IX Header "SEE ALSO"
MooseX::Declare, Method::Signatures, MooseX::Method::Signatures.
