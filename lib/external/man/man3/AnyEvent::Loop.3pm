.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "AnyEvent::Loop 3"
.TH AnyEvent::Loop 3 "2013-08-31" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
AnyEvent::Loop \- AnyEvent's Pure\-Perl event loop
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&   use AnyEvent;
\&   # use AnyEvent::Loop;
\&  
\&   # this module gets loaded automatically when no other loop can be found
\&
\&   # Explicit use:
\&   use AnyEvent::Loop;
\&   use AnyEvent;
\&
\&   ...
\&
\&   AnyEvent::Loop::run; # run the event loop
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides an event loop for AnyEvent in case no other event
loop could be found or loaded. You don't have to do anything to make it
work with AnyEvent except by possibly loading it before creating the first
AnyEvent watcher.
.PP
This module is \fInot\fR some loop abstracion used by AnyEvent, but just
another event loop like \s-1EV\s0 or Glib, just written in pure perl and
delivered with AnyEvent, so AnyEvent always works, even in the absence of
any other backend.
.PP
If you want to use this module instead of autoloading a potentially better
event loop you can simply load it (and no other event loops) before
creating the first watcher.
.PP
As for performance, this module is on par with (and usually faster than)
most select/poll\-based C event modules such as Event or Glib (it does not
even come close to \s-1EV\s0, though), with respect to I/O watchers. Timers are
handled less optimally, but for many common tasks, it is still on par with
event loops written in C.
.PP
This event loop has been optimised for the following use cases:
.IP "monotonic clock is available" 4
.IX Item "monotonic clock is available"
This module will use the \s-1POSIX\s0 monotonic clock option (if it can be
detected at runtime) or the \s-1POSIX\s0 \f(CW\*(C`times\*(C'\fR function (if the resolution
is at least 100Hz), in which case it will not suffer adversely from time
jumps.
.Sp
If no monotonic clock is available, this module will not attempt to
correct for time jumps in any way.
.Sp
The clock chosen will be reported if the environment variable
\&\f(CW$PERL_ANYEVENT_VERBOSE\fR is set to 8 or higher.
.IP "any number of watchers on one fd" 4
.IX Item "any number of watchers on one fd"
Supporting a large number of watchers per fd is purely a dirty benchmark
optimisation not relevant in practise. The more common case of having one
watcher per fd/poll combo is special-cased, however, and therefore fast,
too.
.ie n .IP "relatively few active fds per ""select"" call" 4
.el .IP "relatively few active fds per \f(CWselect\fR call" 4
.IX Item "relatively few active fds per select call"
This module expects that only a tiny amount of fds is active at any one
time. This is relatively typical of larger servers (but not the case where
\&\f(CW\*(C`select\*(C'\fR traditionally is fast), at the expense of the \*(L"dense activity
case\*(R" where most of the fds are active (which suits \f(CW\*(C`select\*(C'\fR).
.Sp
The optimal implementation of the \*(L"dense\*(R" case is not much faster, though,
so the module should behave very well in most cases, subject to the bad
scalability of \f(CW\*(C`select\*(C'\fR in the presence of a large number of inactive
file descriptors.
.IP "lots of timer changes/iteration, or none at all" 4
.IX Item "lots of timer changes/iteration, or none at all"
This module sorts the timer list using perl's \f(CW\*(C`sort\*(C'\fR, even though a total
ordering is not required for timers internally.
.Sp
This sorting is expensive, but means sorting can be avoided unless the
timer list has changed in a way that requires a new sort.
.Sp
This means that adding lots of timers is very efficient, as well as not
changing the timers. Advancing timers (e.g. recreating a timeout watcher
on activity) is also relatively efficient, for example, if you have a
large number of timeout watchers that time out after 10 seconds, then the
timer list will be sorted only once every 10 seconds.
.Sp
This should not have much of an impact unless you have hundreds or
thousands of timers, though, or your timers have very small timeouts.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
The only user-visible functions provided by this module loop related \-
watchers are created via the normal AnyEvent mechanisms.
.IP "AnyEvent::Loop::run" 4
.IX Item "AnyEvent::Loop::run"
Run the event loop, usually the last thing done in the main program when
you want to use the pure-perl backend.
.IP "AnyEvent::Loop::one_event" 4
.IX Item "AnyEvent::Loop::one_event"
Blocks until at least one new event has been received by the operating
system, whether or not it was AnyEvent-related.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
AnyEvent.
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 2
\&   Marc Lehmann <schmorp@schmorp.de>
\&   http://anyevent.schmorp.de
.Ve
