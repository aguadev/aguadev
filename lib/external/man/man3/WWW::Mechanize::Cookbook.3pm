.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "WWW::Mechanize::Cookbook 3"
.TH WWW::Mechanize::Cookbook 3 "2012-09-19" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
WWW::Mechanize::Cookbook \- Recipes for using WWW::Mechanize
.SH "INTRODUCTION"
.IX Header "INTRODUCTION"
First, please note that many of these are possible just using
LWP::UserAgent.  Since \f(CW\*(C`WWW::Mechanize\*(C'\fR is a subclass of
LWP::UserAgent, whatever works on \f(CW\*(C`LWP::UserAgent\*(C'\fR should work
on \f(CW\*(C`WWW::Mechanize\*(C'\fR.  See the lwpcook man page included with
the libwww-perl distribution.
.SH "BASICS"
.IX Header "BASICS"
.SS "Launch the WWW::Mechanize browser"
.IX Subsection "Launch the WWW::Mechanize browser"
.Vb 1
\&    use WWW::Mechanize;
\&
\&    my $mech = WWW::Mechanize\->new( autocheck => 1 );
.Ve
.PP
The \f(CW\*(C`autocheck => 1\*(C'\fR tells Mechanize to die if any \s-1IO\s0 fails,
so you don't have to manually check.  It's easier that way.  If you
want to do your own error checking, leave it out.
.SS "Fetch a page"
.IX Subsection "Fetch a page"
.Vb 2
\&    $mech\->get( "http://search.cpan.org" );
\&    print $mech\->content;
.Ve
.PP
\&\f(CW\*(C`$mech\->content\*(C'\fR contains the raw \s-1HTML\s0 from the web page.  It
is not parsed or handled in any way, at least through the \f(CW\*(C`content\*(C'\fR
method.
.SS "Fetch a page into a file"
.IX Subsection "Fetch a page into a file"
Sometimes you want to dump your results directly into a file.  For
example, there's no reason to read a \s-1JPEG\s0 into memory if you're
only going to write it out immediately.  This can also help with
memory issues on large files.
.PP
.Vb 2
\&    $mech\->get( "http://www.cpan.org/src/stable.tar.gz",
\&                ":content_file" => "stable.tar.gz" );
.Ve
.SS "Fetch a password-protected page"
.IX Subsection "Fetch a password-protected page"
Generally, just call \f(CW\*(C`credentials\*(C'\fR before fetching the page.
.PP
.Vb 3
\&    $mech\->credentials( \*(Aqadmin\*(Aq => \*(Aqpassword\*(Aq );
\&    $mech\->get( \*(Aqhttp://10.11.12.13/password.html\*(Aq );
\&    print $mech\->content();
.Ve
.SH "LINKS"
.IX Header "LINKS"
.SS "Find all image links"
.IX Subsection "Find all image links"
Find all links that point to a \s-1JPEG\s0, \s-1GIF\s0 or \s-1PNG\s0.
.PP
.Vb 2
\&    my @links = $mech\->find_all_links(
\&        tag => "a", url_regex => qr/\e.(jpe?g|gif|png)$/i );
.Ve
.SS "Find all download links"
.IX Subsection "Find all download links"
Find all links that have the word \*(L"download\*(R" in them.
.PP
.Vb 2
\&    my @links = $mech\->find_all_links(
\&        tag => "a", text_regex => qr/\ebdownload\eb/i );
.Ve
.SH "APPLICATIONS"
.IX Header "APPLICATIONS"
.SS "Check all pages on a web site"
.IX Subsection "Check all pages on a web site"
Use Abe Timmerman's WWW::CheckSite
http://search.cpan.org/dist/WWW\-CheckSite/ <http://search.cpan.org/dist/WWW-CheckSite/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
WWW::Mechanize
.SH "AUTHORS"
.IX Header "AUTHORS"
Copyright 2005\-2010 Andy Lester \f(CW\*(C`<andy@petdance.com>\*(C'\fR
.PP
Later contributions by Peter Scott, Mark Stosberg and others.  See
Acknowledgements section in WWW::Mechanize for more.
