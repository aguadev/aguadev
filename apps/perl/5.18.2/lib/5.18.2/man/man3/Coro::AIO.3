.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "AIO 3"
.TH AIO 3 "2014-03-04" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Coro::AIO \- truly asynchronous file and directory I/O
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&   use Coro::AIO;
\&
\&   # can now use any of the aio requests your IO::AIO module supports.
\&
\&   # read 1MB of /etc/passwd, without blocking other coroutines
\&   my $fh = aio_open "/etc/passwd", O_RDONLY, 0
\&      or die "/etc/passwd: $!";
\&   aio_read $fh, 0, 1_000_000, my $buf, 0
\&      or die "aio_read: $!";
\&   aio_close $fh;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is an AnyEvent user, you need to make sure that you use and
run a supported event loop.
.PP
This module implements a thin wrapper around \s-1IO::AIO\s0. All of
the functions that expect a callback are being wrapped by this module.
.PP
The \s-1API\s0 is exactly the same as that of the corresponding \s-1IO::AIO\s0
routines, except that you have to specify \fIall\fR arguments, even the
ones optional in \s-1IO::AIO, \s0\fIexcept\fR the callback argument. Instead of
calling a callback, the routines return the values normally passed to the
callback. Everything else, including \f(CW$!\fR and perls stat cache, are set
as expected after these functions return.
.PP
You can mix calls to \f(CW\*(C`IO::AIO\*(C'\fR functions with calls to this module. You
\&\fImust not\fR, however, call these routines from within \s-1IO::AIO\s0 callbacks,
as this causes a deadlock. Start a coro inside the callback instead.
.PP
This module also loads AnyEvent::AIO to integrate into the event loop
in use, so please refer to its (and AnyEvent's) documentation on how it
selects an appropriate event module.
.PP
All other functions exported by default by \s-1IO::AIO \s0(e.g. \f(CW\*(C`aioreq_pri\*(C'\fR)
will be exported by default by Coro::AIO, too.
.PP
Functions that can be optionally imported from \s-1IO::AIO\s0 can be imported
from Coro::AIO or can be called directly, e.g. \f(CW\*(C`Coro::AIO::nreqs\*(C'\fR.
.PP
You cannot specify priorities with \f(CW\*(C`aioreq_pri\*(C'\fR if your coroutine has a
non-zero priority, as this module overwrites the request priority with the
current coroutine priority in that case.
.PP
For your convenience, here are the changed function signatures for most
of the requests, for documentation of these functions please have a look
at \s-1IO::AIO\s0. Note that requests added by newer
versions of \s-1IO::AIO\s0 will be automatically wrapped as well.
.ie n .IP "@results = aio_wait $req" 4
.el .IP "\f(CW@results\fR = aio_wait \f(CW$req\fR" 4
.IX Item "@results = aio_wait $req"
This is not originally an \s-1IO::AIO\s0 request: what it does is to wait for
\&\f(CW$req\fR to finish and return the results. This is most useful with
\&\f(CW\*(C`aio_group\*(C'\fR requests.
.Sp
Is currently implemented by replacing the \f(CW$req\fR callback (and is very
much like a wrapper around \f(CW\*(C`$req\->cb ()\*(C'\fR).
.ie n .IP "$fh = aio_open $pathname, $flags, $mode" 4
.el .IP "\f(CW$fh\fR = aio_open \f(CW$pathname\fR, \f(CW$flags\fR, \f(CW$mode\fR" 4
.IX Item "$fh = aio_open $pathname, $flags, $mode"
.PD 0
.ie n .IP "$status = aio_close $fh" 4
.el .IP "\f(CW$status\fR = aio_close \f(CW$fh\fR" 4
.IX Item "$status = aio_close $fh"
.ie n .IP "$retval = aio_read  $fh,$offset,$length, $data,$dataoffset" 4
.el .IP "\f(CW$retval\fR = aio_read  \f(CW$fh\fR,$offset,$length, \f(CW$data\fR,$dataoffset" 4
.IX Item "$retval = aio_read $fh,$offset,$length, $data,$dataoffset"
.ie n .IP "$retval = aio_write $fh,$offset,$length, $data,$dataoffset" 4
.el .IP "\f(CW$retval\fR = aio_write \f(CW$fh\fR,$offset,$length, \f(CW$data\fR,$dataoffset" 4
.IX Item "$retval = aio_write $fh,$offset,$length, $data,$dataoffset"
.ie n .IP "$retval = aio_sendfile $out_fh, $in_fh, $in_offset, $length" 4
.el .IP "\f(CW$retval\fR = aio_sendfile \f(CW$out_fh\fR, \f(CW$in_fh\fR, \f(CW$in_offset\fR, \f(CW$length\fR" 4
.IX Item "$retval = aio_sendfile $out_fh, $in_fh, $in_offset, $length"
.ie n .IP "$retval = aio_readahead $fh,$offset,$length" 4
.el .IP "\f(CW$retval\fR = aio_readahead \f(CW$fh\fR,$offset,$length" 4
.IX Item "$retval = aio_readahead $fh,$offset,$length"
.ie n .IP "$status = aio_stat $fh_or_path" 4
.el .IP "\f(CW$status\fR = aio_stat \f(CW$fh_or_path\fR" 4
.IX Item "$status = aio_stat $fh_or_path"
.ie n .IP "$status = aio_lstat $fh" 4
.el .IP "\f(CW$status\fR = aio_lstat \f(CW$fh\fR" 4
.IX Item "$status = aio_lstat $fh"
.ie n .IP "$status = aio_unlink $pathname" 4
.el .IP "\f(CW$status\fR = aio_unlink \f(CW$pathname\fR" 4
.IX Item "$status = aio_unlink $pathname"
.ie n .IP "$status = aio_rmdir $pathname" 4
.el .IP "\f(CW$status\fR = aio_rmdir \f(CW$pathname\fR" 4
.IX Item "$status = aio_rmdir $pathname"
.ie n .IP "$entries = aio_readdir $pathname" 4
.el .IP "\f(CW$entries\fR = aio_readdir \f(CW$pathname\fR" 4
.IX Item "$entries = aio_readdir $pathname"
.ie n .IP "($dirs, $nondirs) = aio_scandir $path, $maxreq" 4
.el .IP "($dirs, \f(CW$nondirs\fR) = aio_scandir \f(CW$path\fR, \f(CW$maxreq\fR" 4
.IX Item "($dirs, $nondirs) = aio_scandir $path, $maxreq"
.ie n .IP "$status = aio_fsync $fh" 4
.el .IP "\f(CW$status\fR = aio_fsync \f(CW$fh\fR" 4
.IX Item "$status = aio_fsync $fh"
.ie n .IP "$status = aio_fdatasync $fh" 4
.el .IP "\f(CW$status\fR = aio_fdatasync \f(CW$fh\fR" 4
.IX Item "$status = aio_fdatasync $fh"
.IP "... = aio_xxx ..." 4
.IX Item "... = aio_xxx ..."
.PD
Any additional aio requests follow the same scheme: same parameters except
you must not specify a callback but instead get the callback arguments as
return values.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Coro::Socket and Coro::Handle for non-blocking socket operation.
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 2
\& Marc Lehmann <schmorp@schmorp.de>
\& http://home.schmorp.de/
.Ve
