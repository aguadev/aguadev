.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MooseX::AttributeHelpers 3"
.TH MooseX::AttributeHelpers 3 "2010-01-01" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MooseX::AttributeHelpers \- Extend your attribute interfaces (deprecated)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  package MyClass;
\&  use Moose;
\&  use MooseX::AttributeHelpers;
\&
\&  has \*(Aqmapping\*(Aq => (
\&      metaclass => \*(AqCollection::Hash\*(Aq,
\&      is        => \*(Aqrw\*(Aq,
\&      isa       => \*(AqHashRef[Str]\*(Aq,
\&      default   => sub { {} },
\&      provides  => {
\&          exists    => \*(Aqexists_in_mapping\*(Aq,
\&          keys      => \*(Aqids_in_mapping\*(Aq,
\&          get       => \*(Aqget_mapping\*(Aq,
\&          set       => \*(Aqset_mapping\*(Aq,
\&      },
\&      curries  => {
\&          set       => { set_quantity => [ \*(Aqquantity\*(Aq ] }
\&      }
\&  );
\&
\&
\&  # ...
\&
\&  my $obj = MyClass\->new;
\&  $obj\->set_quantity(10);      # quantity => 10
\&  $obj\->set_mapping(4, \*(Aqfoo\*(Aq); # 4 => \*(Aqfoo\*(Aq
\&  $obj\->set_mapping(5, \*(Aqbar\*(Aq); # 5 => \*(Aqbar\*(Aq
\&  $obj\->set_mapping(6, \*(Aqbaz\*(Aq); # 6 => \*(Aqbaz\*(Aq
\&
\&
\&  # prints \*(Aqbar\*(Aq
\&  print $obj\->get_mapping(5) if $obj\->exists_in_mapping(5);
\&
\&  # prints \*(Aq4, 5, 6\*(Aq
\&  print join \*(Aq, \*(Aq, $obj\->ids_in_mapping;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBThis distribution is deprecated. The features it provides have been added to
the Moose core code as Moose::Meta::Attribute::Native. This distribution
should not be used by any new code.\fR
.PP
While Moose attributes provide you with a way to name your accessors,
readers, writers, clearers and predicates, this library provides commonly
used attribute helper methods for more specific types of data.
.PP
As seen in the \*(L"\s-1SYNOPSIS\*(R"\s0, you specify the extension via the 
\&\f(CW\*(C`metaclass\*(C'\fR parameter. Available meta classes are:
.SH "PARAMETERS"
.IX Header "PARAMETERS"
.SS "provides"
.IX Subsection "provides"
This points to a hashref that uses \f(CW\*(C`provider\*(C'\fR for the keys and
\&\f(CW\*(C`method\*(C'\fR for the values.  The method will be added to
the object itself and do what you want.
.SS "curries"
.IX Subsection "curries"
This points to a hashref that uses \f(CW\*(C`provider\*(C'\fR for the keys and
has two choices for the value:
.PP
You can supply \f(CW\*(C`{method => [ @args ]}\*(C'\fR for the values.  The method will be
added to the object itself (always using \f(CW@args\fR as the beginning arguments).
.PP
Another approach to curry a method provider is to supply a coderef instead of an
arrayref. The code ref takes \f(CW$self\fR, \f(CW$body\fR, and any additional arguments
passed to the final method.
.PP
.Vb 1
\&  # ...
\&
\&  curries => {
\&      grep => {
\&          times_with_day => sub {
\&              my ($self, $body, $datetime) = @_;
\&              $body\->($self, sub { $_\->ymd eq $datetime\->ymd });
\&          }
\&      }
\&  }
\&
\&  # ...
\&
\&  $obj\->times_with_day(DateTime\->now); # takes datetime argument, checks day
.Ve
.SH "METHOD PROVIDERS"
.IX Header "METHOD PROVIDERS"
.IP "Number" 4
.IX Item "Number"
Common numerical operations.
.IP "String" 4
.IX Item "String"
Common methods for string operations.
.IP "Counter" 4
.IX Item "Counter"
Methods for incrementing and decrementing a counter attribute.
.IP "Bool" 4
.IX Item "Bool"
Common methods for boolean values.
.IP "Collection::Hash" 4
.IX Item "Collection::Hash"
Common methods for hash references.
.IP "Collection::ImmutableHash" 4
.IX Item "Collection::ImmutableHash"
Common methods for inspecting hash references.
.IP "Collection::Array" 4
.IX Item "Collection::Array"
Common methods for array references.
.IP "Collection::List" 4
.IX Item "Collection::List"
Common list methods for array references.
.SH "CAVEAT"
.IX Header "CAVEAT"
This is an early release of this module. Right now it is in great need 
of documentation and tests in the test suite. However, we have used this 
module to great success at \f(CW$work\fR where it has been tested very thoroughly
and deployed into a major production site.
.PP
I plan on getting better docs and tests in the next few releases, but until 
then please refer to the few tests we do have and feel free email and/or 
message me on irc.perl.org if you have any questions.
.SH "TODO"
.IX Header "TODO"
We need tests and docs badly.
.SH "BUGS"
.IX Header "BUGS"
All complex software has bugs lurking in it, and this module is no 
exception. If you find a bug please either email me, or add the bug
to cpan-RT.
.SH "AUTHOR"
.IX Header "AUTHOR"
Stevan Little <stevan@iinteractive.com>
.PP
\&\fBwith contributions from:\fR
.PP
Robert (rlb3) Boone
.PP
Paul (frodwith) Driver
.PP
Shawn (Sartak) Moore
.PP
Chris (perigrin) Prather
.PP
Robert (phaylon) Sedlacek
.PP
Tom (dec) Lanyon
.PP
Yuval Kogman
.PP
Jason May
.PP
Cory (gphat) Watson
.PP
Florian (rafl) Ragwitz
.PP
Evan Carroll
.PP
Jesse (doy) Luehrs
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2007\-2009 by Infinity Interactive, Inc.
.PP
<http://www.iinteractive.com>
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
