.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test::DatabaseRow 3"
.TH Test::DatabaseRow 3 "2012-02-09" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::DatabaseRow \- simple database tests
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Test::More tests => 3;
\&  use Test::DatabaseRow;
\&
\&  # set the default database handle
\&  local $Test::DatabaseRow::dbh = $dbh;
\&
\&  # sql based test
\&  all_row_ok(
\&    sql   => "SELECT * FROM contacts WHERE cid = \*(Aq123\*(Aq",
\&    tests => [ name => "trelane" ],
\&    description => "contact 123\*(Aqs name is trelane"
\&  );
\&
\&  # test with shortcuts
\&  all_row_ok(
\&    table => "contacts",
\&    where => [ cid => 123 ],
\&    tests => [ name => "trelane" ],
\&    description => "contact 123\*(Aqs name is trelane"
\&  );
\&
\&  # complex test
\&  all_row_ok(
\&    table => "contacts",
\&    where => { \*(Aq=\*(Aq    => { name   => "trelane"            },
\&               \*(Aqlike\*(Aq => { url    => \*(Aq%shortplanks.com\*(Aq   },},
\&    tests => { \*(Aq==\*(Aq   => { cid    => 123,
\&                           num    => 134                  },
\&               \*(Aqeq\*(Aq   => { person => "Mark Fowler"        },
\&               \*(Aq=~\*(Aq   => { road   => qr/Liverpool R.?.?d/ },},
\&    description => "trelane entered into contacts okay" );
\&  );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a simple module for doing simple tests on a database, primarily
designed to test if a row exists with the correct details in a table or
not.
.PP
This module exports several functions.
.SS "row_ok"
.IX Subsection "row_ok"
The \f(CW\*(C`row_ok\*(C'\fR function takes named attributes that control which rows
in which table it selects, and what tests are carried out on those rows.
.PP
By default it performs the tests against only the first row returned
from the database, but parameters passed to it can alter that
behavior.
.IP "dbh" 4
.IX Item "dbh"
The database handle that the test should use.  In lieu of this
attribute being passed the test will use whatever handle is set
in the \f(CW$Test::DatabaseRow::dbh\fR global variable.
.IP "sql" 4
.IX Item "sql"
Manually specify the \s-1SQL\s0 to select the rows you want this module to execute.
.Sp
This can either be just a plain string, or it can be an array ref with the
first element containing the \s-1SQL\s0 string and any further elements containing
bind variables that will be used to fill in placeholders.
.Sp
.Vb 3
\&  # using the plain string version
\&  row_ok(sql   => "SELECT * FROM contacts WHERE cid = \*(Aq123\*(Aq",
\&         tests => [ name => "Trelane" ]);
\&
\&  # using placeholders and bind variables
\&  row_ok(sql   => [ "SELECT * FROM contacts WHERE cid = ?", 123 ],
\&         tests => [ name => "Trelane" ]);
.Ve
.IP "table" 4
.IX Item "table"
Build the \s-1SELECT\s0 statement programmatically.  This parameter contains the name
of the table the  \s-1SELECT\s0 statement should be executed against.  You cannot
pass both a \f(CW\*(C`table\*(C'\fR parameter and a \f(CW\*(C`sql\*(C'\fR parameter.  If you specify
\&\f(CW\*(C`table\*(C'\fR you \fBmust\fR pass a \f(CW\*(C`where\*(C'\fR parameter also (see below.)
.IP "where" 4
.IX Item "where"
Build the \s-1SELECT\s0 statement programmatically.  This parameter should contain
options that will combine into a \s-1WHERE\s0 clause in order to select the row
that you want to test.
.Sp
This options normally are a hash of hashes.  It's a hashref keyed by \s-1SQL\s0
comparison operators that has in turn values that are further hashrefs
of column name and values pairs.  This sounds really complicated, but
is quite simple once you've been shown an example.  If we could get
get the data to test with a \s-1SQL\s0 like so:
.Sp
.Vb 6
\&  SELECT *
\&    FROM tablename
\&   WHERE foo  =    \*(Aqbar\*(Aq
\&     AND baz  =     23
\&     AND fred LIKE \*(Aqwilma%\*(Aq
\&     AND age  >=    18
.Ve
.Sp
Then we could have the function build that \s-1SQL\s0 like so:
.Sp
.Vb 5
\&  row_ok(table => "tablename",
\&         where => { \*(Aq=\*(Aq    => { foo  => "bar",
\&                                baz  => 23,       },
\&                    \*(AqLIKE\*(Aq => { fred => \*(Aqwimla%\*(Aq, },
\&                    \*(Aq>=\*(Aq   => { age  => \*(Aq18\*(Aq,     },});
.Ve
.Sp
Note how each different type of comparison has it's own little hashref
containing the column name and the value for that column that the
associated operator \s-1SQL\s0 should search for.
.Sp
This syntax is quite flexible, but can be overkill for simple tests.
In order to make this simpler, if you are only using '=' tests you
may just pass an arrayref of the column names / values.  For example,
just to test
.Sp
.Vb 4
\&  SELECT *
\&    FROM tablename
\&   WHERE foo = \*(Aqbar\*(Aq
\&     AND baz = 23;
.Ve
.Sp
You can simply pass
.Sp
.Vb 3
\&  row_ok(table => "tablename",
\&         where => [ foo  => "bar",
\&                    baz  => 23,    ]);
.Ve
.Sp
Which, in a lot of cases, makes things a lot quicker and simpler to
write.
.Sp
\&\s-1NULL\s0 values can confuse things in \s-1SQL. \s0 All you need to remember is that
when building \s-1SQL\s0 statements use \f(CW\*(C`undef\*(C'\fR whenever you want to use a
\&\s-1NULL\s0 value.  Don't use the string \*(L"\s-1NULL\*(R"\s0 as that'll be interpreted as
the literal string made up of a N, a U and two Ls.
.Sp
As a special case, using \f(CW\*(C`undef\*(C'\fR either in a \f(CW\*(C`=\*(C'\fR or in the short
arrayref form will cause a \*(L"\s-1IS\*(R"\s0 test to be used instead of a \f(CW\*(C`=\*(C'\fR test.
This means the statements:
.Sp
.Vb 2
\&  row_ok(table => "tablename",
\&         where => [ foo  => undef ],)
.Ve
.Sp
Will produce:
.Sp
.Vb 3
\&  SELECT *
\&    FROM tablename
\&   WHERE foo IS NULL
.Ve
.IP "tests" 4
.IX Item "tests"
The comparisons that you want to run between the expected data and the
data in the first line returned from the database.  If you do not
specify any tests then the test will simply check if \fIany\fR rows are
returned from the database and will pass no matter what they actually
contain.
.Sp
Normally this is a hash of hashes in a similar vein to \f(CW\*(C`where\*(C'\fR.
This time the outer hash is keyed by Perl comparison operators, and
the inner hashes contain column names and the expected values for
these columns.  For example:
.Sp
.Vb 5
\&  row_ok(sql   => $sql,
\&         tests => { "eq" => { wibble => "wobble",
\&                              fish   => "fosh",    },
\&                    "==" => { bob    => 4077       },
\&                    "=~" => { fred   => qr/barney/ },},);
.Ve
.Sp
This checks that the column wibble is the string \*(L"wobble\*(R", column fish
is the string \*(L"fosh\*(R", column bob is equal numerically to 4077, and
that fred contains the text \*(L"barney\*(R".  You may use any infix
comparison operator (e.g. \*(L"<\*(R", \*(L">\*(R", \*(L"&&\*(R", etc, etc) as a test key.
.Sp
The first comparison to fail (to return false) will cause the whole
test to fail, and debug information will be printed out on that comparison.
.Sp
In a similar fashion to \f(CW\*(C`where\*(C'\fR you can also pass a arrayref for
simple comparisons.  The function will try and Do The Right Thing with
regard to the expected value for that comparison.  Any expected value that
looks like a number will be compared numerically, a regular expression
will be compared with the \f(CW\*(C`=~\*(C'\fR operator, and anything else will
undergo string comparison.  The above example therefore could be
rewritten:
.Sp
.Vb 5
\&  row_ok(sql   => $sql,
\&         tests => [ wibble => "wobble",
\&                    fish   => "fosh",
\&                    bob    => 4077,
\&                    fred   => qr/barney/ ]);
.Ve
.IP "check_all_rows" 4
.IX Item "check_all_rows"
Setting this to a true value causes \f(CW\*(C`row_ok\*(C'\fR to run the tests
against all rows returned from the database not just the first.
.IP "verbose" 4
.IX Item "verbose"
Setting this option to a true value will cause verbose diagnostics to
be printed out during any failing tests.  You may also enable this
feature by setting either \f(CW$Test::DatabaseRow::verbose\fR variable the
\&\f(CW\*(C`TEST_DBROW_VERBOSE\*(C'\fR environmental variable to a true value.
.IP "store_rows" 4
.IX Item "store_rows"
Sometimes, it's not enough to just use the simple tests that
\&\fBTest::DatabaseRow\fR offers you.  In this situation you can use the
\&\f(CW\*(C`store_rows\*(C'\fR function to get at the results that row_ok has extracted
from the database.  You should pass a reference to an array for the
results to be stored in;  After the call to \f(CW\*(C`row_ok\*(C'\fR this array
will be populated with one hashref per row returned from the database,
keyed by column names.
.Sp
.Vb 2
\&  row_ok(sql => "SELECT * FROM contact WHERE name = \*(AqTrelane\*(Aq",
\&         store_rows => \e@rows);
\&
\&  ok(Email::Valid\->address($rows[0]{\*(Aqemail\*(Aq}));
.Ve
.IP "store_row" 4
.IX Item "store_row"
The same as \f(CW\*(C`store_rows\*(C'\fR, but only the stores the first row returned
in the variable.  Instead of passing in an array reference you should
pass in either a reference to a hash...
.Sp
.Vb 2
\&  row_ok(sql => "SELECT * FROM contact WHERE name = \*(AqTrelane\*(Aq",
\&         store_rows => \e%row);
\&
\&  ok(Email::Valid\->address($row{\*(Aqemail\*(Aq}));
.Ve
.Sp
\&...or a reference to a scalar which should be populated with a
hashref...
.Sp
.Vb 2
\&  row_ok(sql => "SELECT * FROM contact WHERE name = \*(AqTrelane\*(Aq",
\&         store_rows => \e$row);
\&
\&  ok(Email::Valid\->address($row\->{\*(Aqemail\*(Aq}));
.Ve
.IP "description" 4
.IX Item "description"
The description that this test will use with \f(CW\*(C`Test::Builder\*(C'\fR,
i.e the thing that will be printed out after ok/not ok.
For example:
.Sp
.Vb 4
\&  row_ok(
\&    sql => "SELECT * FROM queue",
\&    description => "something in the queue"
\&  );
.Ve
.Sp
Hopefully produces something like:
.Sp
.Vb 1
\&  ok 1 \- something in the queue
.Ve
.Sp
For historical reasons you may also pass \f(CW\*(C`label\*(C'\fR for this
parameter.
.SS "Checking the number of results"
.IX Subsection "Checking the number of results"
By default \f(CW\*(C`row_ok\*(C'\fR just checks the first row returned from the
database matches the criteria passed.  By setting the parameters below
you can also cause the module to check that the correct number of rows
are returned from by the select statement (though only the first row
will be tested against the test conditions.)
.IP "results" 4
.IX Item "results"
Setting this parameter causes the test to ensure that the database
returns exactly this number of rows when the select statement is
executed.  Setting this to zero allows you to ensure that no matching
rows were found by the database, hence this parameter can be used
for negative assertions about the database.
.Sp
.Vb 3
\&  # assert that Trelane is _not_ in the database
\&  row_ok(sql     => "SELECT * FROM contacts WHERE name = \*(AqTrelane\*(Aq",
\&         results => 0 );
\&
\&  # convenience function that does the same thing
\&  not_row_ok(sql => "SELECT * FROM contacts WHERE name = \*(AqTrelane\*(Aq")
.Ve
.IP "min_results / max_results" 4
.IX Item "min_results / max_results"
This parameter allows you to test that the database returns
at least or no more than the passed number of rows when the select
statement is executed.
.SS "Convenience Functions"
.IX Subsection "Convenience Functions"
This module also exports a few convenience functions that make
using certain features of \f(CW\*(C`row_ok\*(C'\fR more straight forward.
.IP "all_row_ok" 4
.IX Item "all_row_ok"
The \f(CW\*(C`all_row_ok\*(C'\fR function is shorthand notation for \*(L"Check every
row returned from the database not just the first\*(R"
.Sp
For example:
.Sp
.Vb 5
\&  all_row_ok(tests => { ">=" => { age => "18" } }, sql => <<\*(AqSQL\*(Aq);
\&    SELECT *
\&      FROM drinkers
\&     WHERE country = \*(Aquk\*(Aq
\&  SQL
.Ve
.Sp
Checks to see that all drinkers from the \s-1UK\s0 are over 18.  It's
identical to having written:
.Sp
.Vb 6
\&  row_ok(tests => { ">=" => { age => "18" } },
\&         check_all_rows => 1, sql => <<\*(AqSQL\*(Aq);
\&    SELECT *
\&      FROM drinkers
\&     WHERE country = \*(Aquk\*(Aq
\&  SQL
.Ve
.IP "not_row_ok" 4
.IX Item "not_row_ok"
The \f(CW\*(C`not_row_ok\*(C'\fR function is shorthand notation for \*(L"the database
returned no rows when I executed this \s-1SQL\*(R".\s0
.Sp
For example:
.Sp
.Vb 5
\&  not_row_ok(sql => <<\*(AqSQL\*(Aq);
\&    SELECT *
\&      FROM languages
\&     WHERE name = \*(AqJava\*(Aq
\&  SQL
.Ve
.Sp
Checks to see the database doesn't have any rows in the language
table that have a name \*(L"Java\*(R".  It's exactly the same as if
we'd written:
.Sp
.Vb 5
\&  row_ok(sql => <<\*(AqSQL\*(Aq, results => 0);
\&    SELECT *
\&      FROM languages
\&     WHERE name = \*(AqJava\*(Aq
\&  SQL
.Ve
.SS "Other \s-1SQL\s0 modules"
.IX Subsection "Other SQL modules"
The \s-1SQL\s0 creation routines that are part of this module are designed
primarily with the concept of getting simple single rows out of the
database with as little fuss as possible.  This having been said, it's
quite possible that you need to use a more complicated \s-1SQL\s0 generation
scheme than the one provided.
.PP
This module is designed to work (hopefully) reasonably well with the
other modules on \s-1CPAN\s0 that can automatically create \s-1SQL\s0 for you.  For
example, \fBSQL::Abstract\fR is a module that can manufacture much more
complex select statements that can easily be 'tied in' to \f(CW\*(C`row_ok\*(C'\fR:
.PP
.Vb 3
\&  use SQL::Abstract;
\&  use Test::DatabaseRow;
\&  my $sql = SQL::Abstract\->new();
\&
\&  # more complex routine to find me heuristically by looking
\&  # for any one of my nicknames and my street address
\&  row_ok(sql   => [ $sql\->select("contacts",
\&                                 "*",
\&                                 { name => [ "Trelane",
\&                                             "Trel",
\&                                             "MarkF" ],
\&                                   road => { \*(Aqlike\*(Aq => "Liverpool%" },
\&                                 })],
\&         tests => [ email => \*(Aqmark@twoshortplanks.com\*(Aq ],
\&         description => "check mark\*(Aqs email address");
.Ve
.SS "utf8 hacks"
.IX Subsection "utf8 hacks"
Often, you may store data utf8 data in your database.  However, many
modern databases still do not store the metadata to indicate the data
stored in them is utf8 and their \s-1DBD\s0 drivers may not set the utf8 flag
on values returned to Perl.  This means that data returned to Perl
will be treated as if it is encoded in your normal character set
rather than being encoded in utf8 and when compared to a byte for
byte an identical utf8 string may fail comparison.
.PP
.Vb 5
\&    # this will fail incorrectly on data coming back from
\&    # mysql since the utf8 flags won\*(Aqt be set on returning data
\&    use utf8;
\&    row_ok(sql   => $sql,
\&           tests => [ name => "Napol\ex{e9}on" ]);
.Ve
.PP
The solution to this is to use \f(CW\*(C`Encode::_utf_on($value)\*(C'\fR on each
value returned from the database, something you will have to do
yourself in your application code.  To get this module to do this for
you you can either pass the \f(CW\*(C`force_utf8\*(C'\fR flag to \f(CW\*(C`row_ok\*(C'\fR.
.PP
.Vb 4
\&    use utf8;
\&    row_ok(sql        => $sql,
\&           tests      => [ name => "Napol\ex{e9}on" ],
\&           force_utf8 => 1);
.Ve
.PP
Or set the global \f(CW$Test::DatabaseRow::force_utf8\fR variable
.PP
.Vb 4
\&   use utf8;
\&   local $Test::DatabaseRow::force_utf8 = 1;
\&   row_ok(sql        => $sql,
\&          tests      => [ name => "Napol\ex{e9}on" ]);
.Ve
.PP
Please note that in the above examples with \f(CW\*(C`use utf8\*(C'\fR enabled I
could have typed Unicode eacutes into the string directly rather than
using the \f(CW\*(C`\ex{e9}\*(C'\fR escape sequence, but alas the pod renderer you're
using to view this documentation would have been unlikely to render
those examples correctly, so I didn't.
.PP
Please also note that if you want the debug information that this
module creates to be rendered to \s-1STDERR\s0 correctly for your utf8
terminal then you may need to stick
.PP
.Vb 1
\&   binmode STDERR, ":utf8";
.Ve
.PP
At the top of your script.
.SS "Using a custom object subclass"
.IX Subsection "Using a custom object subclass"
This procedural wrapper relies on the base functionality of
\&\f(CW\*(C`Test::DatabaseRow::Object\*(C'\fR to do the actual work.  If you want
to subclass that class (for example to use an alternative method
of accessing the database) but continue to use this wrapper
class you can do so by setting the \f(CW$Test::DatabaseRow::object_class\fR
variable.
.PP
For example:
.PP
.Vb 5
\&   local $Test::DatabaseRow::object_class =
\&     "Test::DatabaseRow::Object::MyFunnySubclassOrOther";
\&   row_ok(
\&     sql => "SELECT * FROM qa WHERE a = \*(Aq42\*(Aq",
\&   );
.Ve
.SH "BUGS"
.IX Header "BUGS"
You \fImust\fR pass a \f(CW\*(C`sql\*(C'\fR or \f(CW\*(C`where\*(C'\fR argument to limit what is
returned from the table.  The case where you don't want to is so
unlikely (and it's much more likely that you've written a bug in your
test script) that omitting both of these is treated as an error.  If
you \fIreally\fR need to not pass a \f(CW\*(C`sql\*(C'\fR or \f(CW\*(C`where\*(C'\fR argument, do \f(CW\*(C`where
=> [ 1 => 1 ]\*(C'\fR.
.PP
Passing shared variables (variables shared between multiple threads
with \fBthreads::shared\fR) in with \f(CW\*(C`store_row\*(C'\fR and \f(CW\*(C`store_rows\*(C'\fR and
then changing them while \f(CW\*(C`row_ok\*(C'\fR is still executing is just asking
for trouble.
.PP
The utf8 stuff only really works with perl 5.8 and later.  It just
goes horribly wrong on earlier perls.  There's nothing I can do to
correct that.  Also, no matter what version of Perl you're running,
currently no way provided by this module to force the utf8 flag to be
turned on for some fields and not on for others.
.PP
The inbuilt \s-1SQL\s0 builder always assumes you mean \f(CW\*(C`IS NULL\*(C'\fR not
\&\f(CW\*(C`= NULL\*(C'\fR when you pass in \f(CW\*(C`undef\*(C'\fR in a \f(CW\*(C`=\*(C'\fR section
.PP
Bugs (and requests for new features) can be reported though the \s-1CPAN
RT\s0 system:
<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Test\-DatabaseRow>
.PP
Alternatively, you can simply fork this project on github and
send me pull requests.  Please see <http://github.com/2shortplanks/Test\-DatabaseRow>
.SH "AUTHOR"
.IX Header "AUTHOR"
Written by Mark Fowler \fBmark@twoshortplanks.com\fR
.PP
Copyright Profero 2003, 2004.  Copyright Mark Fowler 2011.
.PP
This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Test::DatabaseRow::Object, Test::More, \s-1DBI\s0
