.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MooseX::AttributeHelpers::MethodProvider::List 3"
.TH MooseX::AttributeHelpers::MethodProvider::List 3 "2010-01-01" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MooseX::AttributeHelpers::MethodProvider::List
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&   package Stuff;
\&   use Moose;
\&   use MooseX::AttributeHelpers;
\&
\&   has \*(Aqoptions\*(Aq => (
\&       metaclass  => \*(AqCollection::List\*(Aq,
\&       is         => \*(Aqrw\*(Aq,
\&       isa        => \*(AqArrayRef[Str]\*(Aq,
\&       default    => sub { [] },
\&       auto_deref => 1,
\&       provides   => {
\&           elements => \*(Aqall_options\*(Aq,
\&           map      => \*(Aqmap_options\*(Aq,
\&           grep     => \*(Aqfilter_options\*(Aq,
\&           find     => \*(Aqfind_option\*(Aq,
\&           first    => \*(Aqfirst_option\*(Aq,
\&           last     => \*(Aqlast_option\*(Aq,
\&           get      => \*(Aqget_option\*(Aq,
\&           join     => \*(Aqjoin_options\*(Aq,
\&           count    => \*(Aqcount_options\*(Aq,
\&           empty    => \*(Aqdo_i_have_options\*(Aq,
\&           sort     => \*(Aqsorted_options\*(Aq,
\&       }
\&   );
\&
\&   no Moose;
\&   1;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a role which provides the method generators for 
MooseX::AttributeHelpers::Collection::List.
.SH "METHODS"
.IX Header "METHODS"
.IP "\fBmeta\fR" 4
.IX Item "meta"
.SH "PROVIDED METHODS"
.IX Header "PROVIDED METHODS"
.PD 0
.IP "\fBcount\fR" 4
.IX Item "count"
.PD
Returns the number of elements in the list.
.Sp
.Vb 2
\&   $stuff = Stuff\->new;
\&   $stuff\->options(["foo", "bar", "baz", "boo"]);
\&
\&   my $count = $stuff\->count_options;
\&   print "$count\en"; # prints 4
.Ve
.IP "\fBempty\fR" 4
.IX Item "empty"
If the list is populated, returns true. Otherwise, returns false.
.Sp
.Vb 1
\&   $stuff\->do_i_have_options ? print "Good boy.\en" : die "No options!\en" ;
.Ve
.IP "\fBfind\fR" 4
.IX Item "find"
This method accepts a subroutine reference as its argument. That sub
will receive each element of the list in turn. If it returns true for
an element, that element will be returned by the \f(CW\*(C`find\*(C'\fR method.
.Sp
.Vb 2
\&   my $found = $stuff\->find_option( sub { $_[0] =~ /^b/ } );
\&   print "$found\en"; # prints "bar"
.Ve
.IP "\fBgrep\fR" 4
.IX Item "grep"
This method accepts a subroutine reference as its argument. This
method returns every element for which that subroutine reference
returns a true value.
.Sp
.Vb 2
\&   my @found = $stuff\->filter_options( sub { $_[0] =~ /^b/ } );
\&   print "@found\en"; # prints "bar baz boo"
.Ve
.IP "\fBmap\fR" 4
.IX Item "map"
This method accepts a subroutine reference as its argument. The
subroutine will be executed for each element of the list. It is
expected to return a modified version of that element. The return
value of the method is a list of the modified options.
.Sp
.Vb 2
\&   my @mod_options = $stuff\->map_options( sub { $_[0] . "\-tag" } );
\&   print "@mod_options\en"; # prints "foo\-tag bar\-tag baz\-tag boo\-tag"
.Ve
.IP "\fBsort\fR" 4
.IX Item "sort"
Sorts and returns the elements of the list.
.Sp
You can provide an optional subroutine reference to sort with (as you
can with the core \f(CW\*(C`sort\*(C'\fR function). However, instead of using \f(CW$a\fR
and \f(CW$b\fR, you will need to use \f(CW$_[0]\fR and \f(CW$_[1]\fR instead.
.Sp
.Vb 2
\&   # ascending ASCIIbetical
\&   my @sorted = $stuff\->sort_options();
\&
\&   # Descending alphabetical order
\&   my @sorted_options = $stuff\->sort_options( sub { lc $_[1] cmp lc $_[0] } );
\&   print "@sorted_options\en"; # prints "foo boo baz bar"
.Ve
.IP "\fBelements\fR" 4
.IX Item "elements"
Returns all of the elements of the list
.Sp
.Vb 2
\&   my @option = $stuff\->all_options;
\&   print "@options\en"; # prints "foo bar baz boo"
.Ve
.IP "\fBjoin\fR" 4
.IX Item "join"
Joins every element of the list using the separator given as argument.
.Sp
.Vb 2
\&   my $joined = $stuff\->join_options( \*(Aq:\*(Aq );
\&   print "$joined\en"; # prints "foo:bar:baz:boo"
.Ve
.IP "\fBget\fR" 4
.IX Item "get"
Returns an element of the list by its index.
.Sp
.Vb 2
\&   my $option = $stuff\->get_option(1);
\&   print "$option\en"; # prints "bar"
.Ve
.IP "\fBfirst\fR" 4
.IX Item "first"
Returns the first element of the list.
.Sp
.Vb 2
\&   my $first = $stuff\->first_option;
\&   print "$first\en"; # prints "foo"
.Ve
.IP "\fBlast\fR" 4
.IX Item "last"
Returns the last element of the list.
.Sp
.Vb 2
\&   my $last = $stuff\->last_option;
\&   print "$last\en"; # prints "boo"
.Ve
.SH "BUGS"
.IX Header "BUGS"
All complex software has bugs lurking in it, and this module is no 
exception. If you find a bug please either email me, or add the bug
to cpan-RT.
.SH "AUTHOR"
.IX Header "AUTHOR"
Stevan Little <stevan@iinteractive.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2007\-2009 by Infinity Interactive, Inc.
.PP
<http://www.iinteractive.com>
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
