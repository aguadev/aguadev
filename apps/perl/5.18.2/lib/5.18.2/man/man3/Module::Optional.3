.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Module::Optional 3"
.TH Module::Optional 3 "2008-05-19" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Module::Optional \- Breaking module dependency chains
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Bar::Dummy qw();
\&  use Module::Optional Bar;
.Ve
.SH "ABSTRACT"
.IX Header "ABSTRACT"
This module provides a way of using a module which may or may not be installed
on the target machine. If the module is available it behaves as a straight 
use. If the module is not available, subs are repointed to their equivalents
in a dummy namespace.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Suppose you are the developer of module \f(CW\*(C`Foo\*(C'\fR, which uses functionality 
from the highly controversial module \f(CW\*(C`Bar\*(C'\fR. You actually quite like \f(CW\*(C`Bar\*(C'\fR,
and want to reuse its functionality in your \f(CW\*(C`Foo\*(C'\fR module. But, many people 
will refuse to install \f(CW\*(C`Foo\*(C'\fR as it needs \f(CW\*(C`Bar\*(C'\fR. Maybe \f(CW\*(C`Bar\*(C'\fR is failing 
tests or is misbehaving on some platforms.
.PP
Making \f(CW\*(C`Bar\*(C'\fR an optional module will allow users to run \f(CW\*(C`Foo\*(C'\fR that don't
have \f(CW\*(C`Bar\*(C'\fR installed. For Module::Build users, this involves changing 
the status of the \f(CW\*(C`Bar\*(C'\fR dependency from \f(CW\*(C`requires\*(C'\fR to \f(CW\*(C`recommends\*(C'\fR.
.PP
To use this module, you need to set up a namespace \f(CW\*(C`Bar::Dummy\*(C'\fR. The 
recommended way of doing this is to ship lib/Bar/Dummy.pm with your module.
This could be shipped as a standalone module. A dummy module for 
\&\f(CW\*(C`Params::Validate\*(C'\fR is shipped with Module::Optional, as this was the 
original motivation for the module. If there are other common candidates 
for dummying, petition me, and I'll include them in the Module::Optional 
distribution.
.SS "Using an optional module"
.IX Subsection "Using an optional module"
Place the lines of code in the following order:
.PP
.Vb 2
\&  use Bar::Dummy qw();
\&  use Module::Optional qw(Bar quux wibble wobble);
.Ve
.PP
Always set up the dummy module first, but don't import anything \- this 
is to avoid warnings about redefined subroutines if the real Bar is 
installed on the target machine. Module::Optional will do the importing: 
quux wibble and wobble from the real Bar if it exists, or from Bar::Dummy
if it doesn't.
.SS "Asking for a module version"
.IX Subsection "Asking for a module version"
If you need a version of the module or later, this can be done thus:
.PP
.Vb 2
\&  use Bar::Dummy qw();
\&  use Module::Optional qw(Bar 0.07 quux wibble wobble);
.Ve
.PP
If version 0.07 or later of Bar is not available, the dummy is used.
.SS "Suppressing the module"
.IX Subsection "Suppressing the module"
You will probably be developing your module on a platform that does have 
Bar installed (I hope). However, you need to be able to tell what happens
on systems without Bar. To do this, run the following (example is Unix):
.PP
.Vb 1
\&  MODULE_OPTIONAL_SKIP=1 make test
.Ve
.PP
You also want to do this in tests for the dummy module that you are 
providing. (You are providing tests for this module?) This can easily be
done with a begin block at the top of the test:
.PP
.Vb 4
\&  BEGIN {
\&      local $ENV{MODULE_OPTIONAL_SKIP} = 1;
\&      use Module::Optional qw(Params::Validate);
\&  }
.Ve
.SS "Writing a ::Dummy Module"
.IX Subsection "Writing a ::Dummy Module"
You provide a namespace suffixed with ::Dummy containing subs corresponding
to all the subs and method calls for the optional module. You should also 
provide the same exports as the module itself performs.
.PP
Adhere strictly to any prototypes in the optional module.
.PP
An example of a dummy module is Params::Validate::Dummy, provided in 
this distribution.
.SH "INTERNALS"
.IX Header "INTERNALS"
Module::Optional performs two types of redirection for the missing module.
Firstly via \f(CW@ISA\fR inheritance \- Foo::Bar inherits from Foo::Bar::Dummy.
.PP
Secondly, an \s-1AUTOLOAD\s0 method is added to Foo::Bar, which will catch calls 
to subs in this namespace.
.SH "BUGS"
.IX Header "BUGS"
Please report bugs to rt.cpan.org by posting to 
bugs\-module\-optional@rt.cpan.org or visiting 
https://rt.cpan.org/Public/Dist/Display.html?Name=Module\-Optional.
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 2
\&        Ivor Williams
\&        ivorw\-mod\-opt at xemaps.com
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Test::MockModule, Module::Pluggable, Module::Build.
