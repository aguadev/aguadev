.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MouseX::ConfigFromFile 3"
.TH MouseX::ConfigFromFile 3 "2010-03-03" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MouseX::ConfigFromFile \- An abstract Mouse role for setting attributes from a configfile
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
A real role based on this abstract role:
.PP
.Vb 3
\&  package MyApp::ConfigRole;
\&  use Mouse::Role;
\&  with \*(AqMouseX::ConfigFromFile\*(Aq;
\&
\&  use MyApp::ConfigLoader;
\&
\&  sub get_config_from_file {
\&      my ($class, $file) = @_;
\&
\&      my $config_hashref = MyApp::ConfigLoader\->load($file);
\&
\&      return $config_hashref;
\&  }
.Ve
.PP
A class that uses it:
.PP
.Vb 3
\&  package MyApp;
\&  use Mouse;
\&  with \*(AqMyApp::ConfigRole\*(Aq;
\&
\&  # optionally, default the configfile:
\&  has \*(Aq+configfile\*(Aq => ( default => \*(Aq/tmp/myapp.yml\*(Aq );
.Ve
.PP
A script that uses the class with a configfile:
.PP
.Vb 4
\&  my $app = MyApp\->new_with_config(
\&      configfile => \*(Aq/etc/myapp.yml\*(Aq,
\&      other_opt  => \*(Aqfoo\*(Aq,
\&  );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is an abstract role which provides an alternate constructor for
creating objects using parameters passed in from a configuration file.
The actual implementation of reading the configuration file is left to
concrete subroles.
.PP
It declares an attribute \f(CW\*(C`configfile\*(C'\fR and a class method
\&\f(CW\*(C`new_with_config\*(C'\fR, and requires that concrete roles derived from it
implement the class method \f(CW\*(C`get_config_from_file\*(C'\fR.
.PP
Attributes specified directly as arguments to \f(CW\*(C`new_with_config\*(C'\fR
supercede those in the configfile.
.SH "METHODS"
.IX Header "METHODS"
.SS "new_with_config(%params?)"
.IX Subsection "new_with_config(%params?)"
This is an alternate constructor, which knows to look for the
\&\f(CW\*(C`configfile\*(C'\fR option in its arguments and use that to set attributes.
It is much like MouseX::Getopts' \f(CW\*(C`new_with_options\*(C'\fR.
.PP
Example:
.PP
.Vb 1
\&  my $app = MyApp\->new_with_config( configfile => \*(Aq/etc/foo.yaml\*(Aq );
.Ve
.PP
Explicit arguments will override anything set by the configfile.
.SS "get_config_from_file($file)"
.IX Subsection "get_config_from_file($file)"
This method is not implemented in this role, but it is required
of all subroles. Its two arguments are the class name and the configfile,
and it is expected to return a hashref of arguments to pass to \f(CW\*(C`new()\*(C'\fR
which are sourced from the configfile.
.PP
Example:
.PP
.Vb 2
\&  sub get_config_from_file {
\&      my ($class, $file) = @_;
\&
\&      my $config = {};
\&
\&      # ... load config from $file ...
\&
\&      return $config;
\&  }
.Ve
.SH "PROPERTIES"
.IX Header "PROPERTIES"
.SS "configfile"
.IX Subsection "configfile"
This is a Path::Class::File object which can be coerced from a regular
path name string. This is the file your attributes are loaded from.
You can add a default configfile in the class using the role and it will
be honored at the appropriate time:
.PP
.Vb 1
\&  has \*(Aq+configfile\*(Aq => ( default => \*(Aq/etc/myapp.yaml\*(Aq );
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
\&\s-1NAKAGAWA\s0 Masaki <masaki@cpan.org>
.SH "THANKS TO"
.IX Header "THANKS TO"
Brandon L. Black, \*(L"\s-1AUTHOR\s0\*(R" in MooseX::ConfigFromFile
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mouse, Mouse::Role, MouseX::Types::Path::Class, MooseX::ConfigFromFile
