.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Method::Signatures::Simple 3"
.TH Method::Signatures::Simple 3 "2013-01-20" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Method::Signatures::Simple \- Basic method declarations with signatures, without source filters
.SH "VERSION"
.IX Header "VERSION"
version 1.07
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    # \-\- a basic class \-\- #
\&    package User;
\&    use Method::Signatures::Simple;
\&
\&    method new ($class: $name, $email) {
\&        my $user = {
\&            id    => new_id(42),
\&            name  => $name,
\&            email => $email,
\&        };
\&        bless $user, $class;
\&    }
\&
\&    func new_id ($seed) {
\&        state $id = $seed;
\&        $id++;
\&    }
\&
\&    method name  { $self\->{name};  }
\&    method email { $self\->{email}; }
\&    1;
\&
\&
\&    # \-\- other features \-\- #
\&    # attributes
\&    method foo : lvalue { $self\->{foo} }
\&
\&    # change invocant name
\&    use Method::Signatures::Simple invocant => \*(Aq$this\*(Aq;
\&    method foo ($bar) { $this\->bar($bar) }
\&    method bar ($class: $bar) { $class\->baz($bar) }
\&
\&    # use a different function keyword
\&    use Method::Signatures::Simple function_keyword => \*(Aqfun\*(Aq;
\&    fun triple ($num) { 3 * $num }
\&
\&    # use a different method keyword
\&    use Method::Signatures::Simple method_keyword => \*(Aqaction\*(Aq;
\&    action foo { $self\->bar }
.Ve
.SH "RATIONALE"
.IX Header "RATIONALE"
This module provides basic \f(CW\*(C`method\*(C'\fR and \f(CW\*(C`func\*(C'\fR keywords with simple
signatures. It's intentionally simple, and is supposed to be a stepping stone
for its bigger brothers MooseX::Method::Signatures and
Method::Signatures.  It only has a small benefit over regular subs, so
if you want more features, look at those modules.  But if you're looking
for a small amount of syntactic sugar, this might just be enough.
.SH "FEATURES"
.IX Header "FEATURES"
.IP "\(bu" 4
invocant
.Sp
The \f(CW\*(C`method\*(C'\fR keyword automatically injects the annoying \f(CW\*(C`my $self = shift;\*(C'\fR
for you. You can rename the invocant with the first argument, followed by a
colon:
.Sp
.Vb 2
\&    method ($this:) {}
\&    method ($this: $that) {}
.Ve
.Sp
The \f(CW\*(C`func\*(C'\fR keyword doesn't inject an invocant, but does do the signature
processing below:
.Sp
.Vb 1
\&    func ($that) {}
.Ve
.IP "\(bu" 4
signature
.Sp
The signature \f(CW\*(C`($sig)\*(C'\fR is transformed into \f(CW"my ($sig) = \e@_;"\fR. That way, we
mimic perl's usual argument handling.
.Sp
.Vb 2
\&    method foo ($bar, $baz, %opts) {
\&    func xyzzy ($plugh, @zorkmid) {
\&
\&    # becomes
\&
\&    sub foo {
\&        my $self = shift;
\&        my ($bar, $baz, %opts) = @_;
\&
\&    sub xyzzy {
\&        my ($plugh, @zorkmid) = @_;
.Ve
.SH "ADVANCED CONFIGURATION"
.IX Header "ADVANCED CONFIGURATION"
Since this module subclasses Devel::Declare::MethodInstaller::Simple, you
can change the keywords and the default invocant with import arguments. These
changes affect the current scope.
.IP "\(bu" 4
change the invocant name
.Sp
.Vb 3
\&    use Method::Signatures::Simple invocant => \*(Aq$this\*(Aq;
\&    method x { $this\->{x} }
\&    method y { $this\->{y} }
\&
\&    # and this of course still works:
\&    method z ($self:) { $self\->{z} }
.Ve
.IP "\(bu" 4
change the keywords
.Sp
You can install a different keyword (instead of the default 'method' and
\&'func'), by passing names to the \f(CW\*(C`use\*(C'\fR line:
.Sp
.Vb 2
\&    use Method::Signatures::Simple method_keyword   => \*(Aqaction\*(Aq,
\&                                   function_keyword => \*(Aqthing\*(Aq;
\&
\&    action foo ($some, $args) { ... }
\&    thing bar ($whatever) { ... }
.Ve
.Sp
One benefit of this is that you can use this module together with e.g.
MooseX::Declare:
.Sp
.Vb 2
\&    # untested
\&    use MooseX::Declare;
\&
\&    class Foo {
\&        use Method::Signatures::Simple method_keyword => \*(Aqroutine\*(Aq;
\&        method x (Int $x) { ... }    # from MooseX::Method::Signatures
\&        routine y ($y) { ... }       # from this module
\&    }
.Ve
.Sp
If you specify neither \f(CW\*(C`method_keyword\*(C'\fR nor \f(CW\*(C`function_keyword\*(C'\fR, then we
default to injecting \f(CW\*(C`method\*(C'\fR and \f(CW\*(C`func\*(C'\fR. If you only specify one of these
options, then we only inject that one keyword into your scope.
.Sp
Examples:
.Sp
.Vb 2
\&    # injects \*(Aqmethod\*(Aq and \*(Aqfunc\*(Aq
\&    use Method::Signatures::Simple;
\&
\&    # only injects \*(Aqaction\*(Aq
\&    use Method::Signatures::Simple method_keyword => \*(Aqaction\*(Aq;
\&
\&    # only injects \*(Aqprocedure\*(Aq
\&    use Method::Signatures::Simple function_keyword => \*(Aqprocedure\*(Aq;
\&
\&    # injects \*(Aqaction\*(Aq and \*(Aqfunction\*(Aq
\&    use Method::Signatures::Simple method_keyword   => \*(Aqaction\*(Aq,
\&                                   function_keyword => \*(Aqfunction\*(Aq;
.Ve
.IP "\(bu" 4
install several keywords
.Sp
You're not limited to a single \f(CW\*(C`use\*(C'\fR line, so you can install several keywords with the same
semantics as 'method' into the current scope:
.Sp
.Vb 2
\&    use Method::Signatures::Simple; # provides \*(Aqmethod\*(Aq and \*(Aqfunc\*(Aq
\&    use Method::Signatures::Simple method_keyword => \*(Aqaction\*(Aq;
\&
\&    method x { ... }
\&    func y { ... }
\&    action z { ... }
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Rhesa Rozendaal, \f(CW\*(C`<rhesa at cpan.org>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-method\-signatures\-simple at rt.cpan.org\*(C'\fR, or through
the web interface at <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Method\-Signatures\-Simple>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Method::Signatures::Simple
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Method\-Signatures\-Simple>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/Method\-Signatures\-Simple>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/Method\-Signatures\-Simple>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/Method\-Signatures\-Simple>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
.IP "\(bu" 4
\&\s-1MSTROUT\s0
.Sp
For writing Devel::Declare and providing the core concepts.
.IP "\(bu" 4
\&\s-1MSCHWERN\s0
.Sp
For writing Method::Signatures and publishing about it. This is what got my attention.
.IP "\(bu" 4
\&\s-1FLORA\s0
.Sp
For helping me abstracting the Devel::Declare bits and suggesting improvements.
.IP "\(bu" 4
\&\s-1CHIPS\s0
.Sp
For suggesting we add a 'func' keyword.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Devel::Declare, Method::Signatures, MooseX::Method::Signatures.
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2011 Rhesa Rozendaal, all rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
