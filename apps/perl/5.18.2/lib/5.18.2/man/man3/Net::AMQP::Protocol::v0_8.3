.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::AMQP::Protocol::v0_8 3"
.TH Net::AMQP::Protocol::v0_8 3 "2014-04-10" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::AMQP::Protocol::v0_8 \- AMQP v0.8 (de)serialization and representation
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Net::AMQP::Protocol::v0_8;
\&  
\&  ...
\&
\&  my @frames = Net::AMQP\->parse_raw_frames(\e$input);
\&  
\&  ...
\&
\&  my $frame = Net::AMQP::Frame::Method\->new(
\&      channel => 0,
\&      method_frame => Net::AMQP::Protocol::Connection::StartOk\->new(
\&          client_properties => { ... },
\&          mechanism         => \*(AqAMQPLAIN\*(Aq,
\&          locale            => \*(Aqen_US\*(Aq,
\&          response          => {
\&              LOGIN    => \*(Aqguest\*(Aq,
\&              PASSWORD => \*(Aqguest\*(Aq,
\&          },
\&      ),
\&  );
\&
\&  print OUT $frame\->to_raw_frame();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module implements the frame (de)serialization and representation of the Advanced Message Queue Protocol (http://www.amqp.org/) version 0.8.
.PP
It is to be used in conjunction with client or server software that does the actual \s-1TCP/IP\s0 communication.
.SH "PROTOCOL CLASSES"
.IX Header "PROTOCOL CLASSES"
.SS "Net::AMQP::Protocol::Connection::Start"
.IX Subsection "Net::AMQP::Protocol::Connection::Start"
This class implements the class \fBConnection\fR method \fBStart\fR, which is a synchronous method.
.PP
This method starts the connection negotiation process by telling the client the protocol version that the server proposes, along with a list of security mechanisms which the client can use for authentication.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIversion_major\fR (type: octet)" 4
.IX Item "version_major (type: octet)"
Protocol major version
.Sp
The protocol major version that the server agrees to use, which cannot be higher than the client's major version.
.IP "\fIversion_minor\fR (type: octet)" 4
.IX Item "version_minor (type: octet)"
Protocol major version
.Sp
The protocol minor version that the server agrees to use, which cannot be higher than the client's minor version.
.IP "\fIserver_properties\fR (type: table)" 4
.IX Item "server_properties (type: table)"
Server properties
.IP "\fImechanisms\fR (type: longstr)" 4
.IX Item "mechanisms (type: longstr)"
Available security mechanisms
.Sp
A list of the security mechanisms that the server supports, delimited by spaces. Currently \s-1ASL\s0 supports these mechanisms: \s-1PLAIN. \s0
.IP "\fIlocales\fR (type: longstr)" 4
.IX Item "locales (type: longstr)"
Available message locales
.Sp
A list of the message locales that the server supports, delimited by spaces. The locale defines the language in which the server will send reply texts.
.SS "Net::AMQP::Protocol::Connection::StartOk"
.IX Subsection "Net::AMQP::Protocol::Connection::StartOk"
This class implements the class \fBConnection\fR method \fBStartOk\fR, which is a synchronous method.
.PP
This method selects a \s-1SASL\s0 security mechanism. \s-1ASL\s0 uses \s-1SASL \s0(\s-1RFC2222\s0) to negotiate authentication and encryption.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIclient_properties\fR (type: table)" 4
.IX Item "client_properties (type: table)"
Client properties
.IP "\fImechanism\fR (type: shortstr)" 4
.IX Item "mechanism (type: shortstr)"
Selected security mechanism
.Sp
A single security mechanisms selected by the client, which must be one of those specified by the server.
.IP "\fIresponse\fR (type: longstr)" 4
.IX Item "response (type: longstr)"
Security response data
.Sp
A block of opaque data passed to the security mechanism. The contents of this data are defined by the \s-1SASL\s0 security mechanism. For the \s-1PLAIN\s0 security mechanism this is defined as a field table holding two fields, \s-1LOGIN\s0 and \s-1PASSWORD. \s0
.IP "\fIlocale\fR (type: shortstr)" 4
.IX Item "locale (type: shortstr)"
Selected message locale
.Sp
A single message local selected by the client, which must be one of those specified by the server.
.SS "Net::AMQP::Protocol::Connection::Secure"
.IX Subsection "Net::AMQP::Protocol::Connection::Secure"
This class implements the class \fBConnection\fR method \fBSecure\fR, which is a synchronous method.
.PP
The \s-1SASL\s0 protocol works by exchanging challenges and responses until both peers have received sufficient information to authenticate each other. This method challenges the client to provide more information.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIchallenge\fR (type: longstr)" 4
.IX Item "challenge (type: longstr)"
Security challenge data
.Sp
Challenge information, a block of opaque binary data passed to the security mechanism.
.SS "Net::AMQP::Protocol::Connection::SecureOk"
.IX Subsection "Net::AMQP::Protocol::Connection::SecureOk"
This class implements the class \fBConnection\fR method \fBSecureOk\fR, which is a synchronous method.
.PP
This method attempts to authenticate, passing a block of \s-1SASL\s0 data for the security mechanism at the server side.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIresponse\fR (type: longstr)" 4
.IX Item "response (type: longstr)"
Security response data
.Sp
A block of opaque data passed to the security mechanism. The contents of this data are defined by the \s-1SASL\s0 security mechanism.
.SS "Net::AMQP::Protocol::Connection::Tune"
.IX Subsection "Net::AMQP::Protocol::Connection::Tune"
This class implements the class \fBConnection\fR method \fBTune\fR, which is a synchronous method.
.PP
This method proposes a set of connection configuration values to the client. The client can accept and/or adjust these.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIchannel_max\fR (type: short)" 4
.IX Item "channel_max (type: short)"
Proposed maximum channels
.Sp
The maximum total number of channels that the server allows per connection. Zero means that the server does not impose a fixed limit, but the number of allowed channels may be limited by available server resources.
.IP "\fIframe_max\fR (type: long)" 4
.IX Item "frame_max (type: long)"
Proposed maximum frame size
.Sp
The largest frame size that the server proposes for the connection. The client can negotiate a lower value. Zero means that the server does not impose any specific limit but may reject very large frames if it cannot allocate resources for them.
.IP "\fIheartbeat\fR (type: short)" 4
.IX Item "heartbeat (type: short)"
Desired heartbeat delay
.Sp
The delay, in seconds, of the connection heartbeat that the server wants. Zero means the server does not want a heartbeat.
.SS "Net::AMQP::Protocol::Connection::TuneOk"
.IX Subsection "Net::AMQP::Protocol::Connection::TuneOk"
This class implements the class \fBConnection\fR method \fBTuneOk\fR, which is a synchronous method.
.PP
This method sends the client's connection tuning parameters to the server. Certain fields are negotiated, others provide capability information.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIchannel_max\fR (type: short)" 4
.IX Item "channel_max (type: short)"
Negotiated maximum channels
.Sp
The maximum total number of channels that the client will use per connection. May not be higher than the value specified by the server.
.IP "\fIframe_max\fR (type: long)" 4
.IX Item "frame_max (type: long)"
Negotiated maximum frame size
.Sp
The largest frame size that the client and server will use for the connection. Zero means that the client does not impose any specific limit but may reject very large frames if it cannot allocate resources for them. Note that the frame-max limit applies principally to content frames, where large contents can be broken into frames of arbitrary size.
.IP "\fIheartbeat\fR (type: short)" 4
.IX Item "heartbeat (type: short)"
Desired heartbeat delay
.Sp
The delay, in seconds, of the connection heartbeat that the client wants. Zero means the client does not want a heartbeat.
.SS "Net::AMQP::Protocol::Connection::Open"
.IX Subsection "Net::AMQP::Protocol::Connection::Open"
This class implements the class \fBConnection\fR method \fBOpen\fR, which is a synchronous method.
.PP
This method opens a connection to a virtual host, which is a collection of resources, and acts to separate multiple application domains within a server.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIvirtual_host\fR (type: shortstr)" 4
.IX Item "virtual_host (type: shortstr)"
Virtual host name
.Sp
The name of the virtual host to work with.
.IP "\fIcapabilities\fR (type: shortstr)" 4
.IX Item "capabilities (type: shortstr)"
Required capabilities
.Sp
The client may specify a number of capability names, delimited by spaces. The server can use this string to how to process the client's connection request.
.IP "\fIinsist\fR (type: bit)" 4
.IX Item "insist (type: bit)"
Insist on connecting to server
.Sp
In a configuration with multiple load-sharing servers, the server may respond to a Connection.Open method with a Connection.Redirect. The insist option tells the server that the client is insisting on a connection to the specified server.
.SS "Net::AMQP::Protocol::Connection::OpenOk"
.IX Subsection "Net::AMQP::Protocol::Connection::OpenOk"
This class implements the class \fBConnection\fR method \fBOpenOk\fR, which is a synchronous method.
.PP
This method signals to the client that the connection is ready for use.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIknown_hosts\fR (type: shortstr)" 4
.IX Item "known_hosts (type: shortstr)"
.SS "Net::AMQP::Protocol::Connection::Redirect"
.IX Subsection "Net::AMQP::Protocol::Connection::Redirect"
This class implements the class \fBConnection\fR method \fBRedirect\fR, which is a synchronous method.
.PP
This method redirects the client to another server, based on the requested virtual host and/or capabilities.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIhost\fR (type: shortstr)" 4
.IX Item "host (type: shortstr)"
Server to connect to
.Sp
Specifies the server to connect to. This is an \s-1IP\s0 address or a \s-1DNS\s0 name, optionally followed by a colon and a port number. If no port number is specified, the client should use the default port number for the protocol.
.IP "\fIknown_hosts\fR (type: shortstr)" 4
.IX Item "known_hosts (type: shortstr)"
.SS "Net::AMQP::Protocol::Connection::Close"
.IX Subsection "Net::AMQP::Protocol::Connection::Close"
This class implements the class \fBConnection\fR method \fBClose\fR, which is a synchronous method.
.PP
This method indicates that the sender wants to close the connection. This may be due to internal conditions (e.g. a forced shut-down) or due to an error handling a specific method, i.e. an exception. When a close is due to an exception, the sender provides the class and method id of the method which caused the exception.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIreply_code\fR (type: short)" 4
.IX Item "reply_code (type: short)"
.PD 0
.IP "\fIreply_text\fR (type: shortstr)" 4
.IX Item "reply_text (type: shortstr)"
.IP "\fIclass_id\fR (type: short)" 4
.IX Item "class_id (type: short)"
.PD
Failing method class
.Sp
When the close is provoked by a method exception, this is the class of the method.
.IP "\fImethod_id\fR (type: short)" 4
.IX Item "method_id (type: short)"
Failing method \s-1ID \s0
.Sp
When the close is provoked by a method exception, this is the \s-1ID\s0 of the method.
.SS "Net::AMQP::Protocol::Connection::CloseOk"
.IX Subsection "Net::AMQP::Protocol::Connection::CloseOk"
This class implements the class \fBConnection\fR method \fBCloseOk\fR, which is a synchronous method.
.PP
This method confirms a Connection.Close method and tells the recipient that it is safe to release resources for the connection and close the socket.
.PP
This class has no fields nor accessors.
.SS "Net::AMQP::Protocol::Channel::Open"
.IX Subsection "Net::AMQP::Protocol::Channel::Open"
This class implements the class \fBChannel\fR method \fBOpen\fR, which is a synchronous method.
.PP
This method opens a virtual connection (a channel).
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIout_of_band\fR (type: shortstr)" 4
.IX Item "out_of_band (type: shortstr)"
Out-of-band settings
.Sp
Configures out-of-band transfers on this channel. The syntax and meaning of this field will be formally defined at a later date.
.SS "Net::AMQP::Protocol::Channel::OpenOk"
.IX Subsection "Net::AMQP::Protocol::Channel::OpenOk"
This class implements the class \fBChannel\fR method \fBOpenOk\fR, which is a synchronous method.
.PP
This method signals to the client that the channel is ready for use.
.PP
This class has no fields nor accessors.
.SS "Net::AMQP::Protocol::Channel::Flow"
.IX Subsection "Net::AMQP::Protocol::Channel::Flow"
This class implements the class \fBChannel\fR method \fBFlow\fR, which is a synchronous method.
.PP
This method asks the peer to pause or restart the flow of content data. This is a simple flow-control mechanism that a peer can use to avoid oveflowing its queues or otherwise finding itself receiving more messages than it can process. Note that this method is not intended for window control. The peer that receives a request to stop sending content should finish sending the current content, if any, and then wait until it receives a Flow restart method.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIactive\fR (type: bit)" 4
.IX Item "active (type: bit)"
Start/stop content frames
.Sp
If 1, the peer starts sending content frames. If 0, the peer stops sending content frames.
.SS "Net::AMQP::Protocol::Channel::FlowOk"
.IX Subsection "Net::AMQP::Protocol::Channel::FlowOk"
This class implements the class \fBChannel\fR method \fBFlowOk\fR, which is an asynchronous method.
.PP
Confirms to the peer that a flow command was received and processed.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIactive\fR (type: bit)" 4
.IX Item "active (type: bit)"
Current flow setting
.Sp
Confirms the setting of the processed flow method: 1 means the peer will start sending or continue to send content frames; 0 means it will not.
.SS "Net::AMQP::Protocol::Channel::Alert"
.IX Subsection "Net::AMQP::Protocol::Channel::Alert"
This class implements the class \fBChannel\fR method \fBAlert\fR, which is an asynchronous method.
.PP
This method allows the server to send a non-fatal warning to the client. This is used for methods that are normally asynchronous and thus do not have confirmations, and for which the server may detect errors that need to be reported. Fatal errors are handled as channel or connection exceptions; non-fatal errors are sent through this method.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIreply_code\fR (type: short)" 4
.IX Item "reply_code (type: short)"
.PD 0
.IP "\fIreply_text\fR (type: shortstr)" 4
.IX Item "reply_text (type: shortstr)"
.IP "\fIdetails\fR (type: table)" 4
.IX Item "details (type: table)"
.PD
Detailed information for warning
.Sp
A set of fields that provide more information about the problem. The meaning of these fields are defined on a per-reply-code basis (\s-1TO BE DEFINED\s0).
.SS "Net::AMQP::Protocol::Channel::Close"
.IX Subsection "Net::AMQP::Protocol::Channel::Close"
This class implements the class \fBChannel\fR method \fBClose\fR, which is a synchronous method.
.PP
This method indicates that the sender wants to close the channel. This may be due to internal conditions (e.g. a forced shut-down) or due to an error handling a specific method, i.e. an exception. When a close is due to an exception, the sender provides the class and method id of the method which caused the exception.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIreply_code\fR (type: short)" 4
.IX Item "reply_code (type: short)"
.PD 0
.IP "\fIreply_text\fR (type: shortstr)" 4
.IX Item "reply_text (type: shortstr)"
.IP "\fIclass_id\fR (type: short)" 4
.IX Item "class_id (type: short)"
.PD
Failing method class
.Sp
When the close is provoked by a method exception, this is the class of the method.
.IP "\fImethod_id\fR (type: short)" 4
.IX Item "method_id (type: short)"
Failing method \s-1ID \s0
.Sp
When the close is provoked by a method exception, this is the \s-1ID\s0 of the method.
.SS "Net::AMQP::Protocol::Channel::CloseOk"
.IX Subsection "Net::AMQP::Protocol::Channel::CloseOk"
This class implements the class \fBChannel\fR method \fBCloseOk\fR, which is a synchronous method.
.PP
This method confirms a Channel.Close method and tells the recipient that it is safe to release resources for the channel and close the socket.
.PP
This class has no fields nor accessors.
.SS "Net::AMQP::Protocol::Access::Request"
.IX Subsection "Net::AMQP::Protocol::Access::Request"
This class implements the class \fBAccess\fR method \fBRequest\fR, which is a synchronous method.
.PP
This method requests an access ticket for an access realm. The server responds by granting the access ticket. If the client does not have access rights to the requested realm this causes a connection exception. Access tickets are a per-channel resource.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIrealm\fR (type: shortstr)" 4
.IX Item "realm (type: shortstr)"
Name of requested realm
.IP "\fIexclusive\fR (type: bit)" 4
.IX Item "exclusive (type: bit)"
Request exclusive access
.Sp
Request exclusive access to the realm. If the server cannot grant this \- because there are other active tickets for the realm \- it raises a channel exception.
.IP "\fIpassive\fR (type: bit)" 4
.IX Item "passive (type: bit)"
Request passive access
.Sp
Request message passive access to the specified access realm. Passive access lets a client get information about resources in the realm but not to make any changes to them.
.IP "\fIactive\fR (type: bit)" 4
.IX Item "active (type: bit)"
Request active access
.Sp
Request message active access to the specified access realm. Acvtive access lets a client get create and delete resources in the realm.
.IP "\fIwrite\fR (type: bit)" 4
.IX Item "write (type: bit)"
Request write access
.Sp
Request write access to the specified access realm. Write access lets a client publish messages to all exchanges in the realm.
.IP "\fIread\fR (type: bit)" 4
.IX Item "read (type: bit)"
Request read access
.Sp
Request read access to the specified access realm. Read access lets a client consume messages from queues in the realm.
.SS "Net::AMQP::Protocol::Access::RequestOk"
.IX Subsection "Net::AMQP::Protocol::Access::RequestOk"
This class implements the class \fBAccess\fR method \fBRequestOk\fR, which is a synchronous method.
.PP
This method provides the client with an access ticket. The access ticket is valid within the current channel and for the lifespan of the channel.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIticket\fR (type: short)" 4
.IX Item "ticket (type: short)"
.SS "Net::AMQP::Protocol::Exchange::Declare"
.IX Subsection "Net::AMQP::Protocol::Exchange::Declare"
This class implements the class \fBExchange\fR method \fBDeclare\fR, which is a synchronous method.
.PP
This method creates an exchange if it does not already exist, and if the exchange exists, verifies that it is of the correct and expected class.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIticket\fR (type: short)" 4
.IX Item "ticket (type: short)"
When a client defines a new exchange, this belongs to the access realm of the ticket used. All further work done with that exchange must be done with an access ticket for the same realm.
.IP "\fIexchange\fR (type: shortstr)" 4
.IX Item "exchange (type: shortstr)"
.PD 0
.IP "\fItype\fR (type: shortstr)" 4
.IX Item "type (type: shortstr)"
.PD
Exchange type
.Sp
Each exchange belongs to one of a set of exchange types implemented by the server. The exchange types define the functionality of the exchange \- i.e. how messages are routed through it. It is not valid or meaningful to attempt to change the type of an existing exchange.
.IP "\fIpassive\fR (type: bit)" 4
.IX Item "passive (type: bit)"
Do not create exchange
.Sp
If set, the server will not create the exchange. The client can use this to check whether an exchange exists without modifying the server state.
.IP "\fIdurable\fR (type: bit)" 4
.IX Item "durable (type: bit)"
Request a durable exchange
.Sp
If set when creating a new exchange, the exchange will be marked as durable. Durable exchanges remain active when a server restarts. Non-durable exchanges (transient exchanges) are purged if/when a server restarts.
.IP "\fIauto_delete\fR (type: bit)" 4
.IX Item "auto_delete (type: bit)"
Auto-delete when unused
.Sp
If set, the exchange is deleted when all queues have finished using it.
.IP "\fIinternal\fR (type: bit)" 4
.IX Item "internal (type: bit)"
Create internal exchange
.Sp
If set, the exchange may not be used directly by publishers, but only when bound to other exchanges. Internal exchanges are used to construct wiring that is not visible to applications.
.IP "\fInowait\fR (type: bit)" 4
.IX Item "nowait (type: bit)"
Do not send a reply method
.Sp
If set, the server will not respond to the method. The client should not wait for a reply method. If the server could not complete the method it will raise a channel or connection exception.
.IP "\fIarguments\fR (type: table)" 4
.IX Item "arguments (type: table)"
Arguments for declaration
.Sp
A set of arguments for the declaration. The syntax and semantics of these arguments depends on the server implementation. This field is ignored if passive is 1.
.SS "Net::AMQP::Protocol::Exchange::DeclareOk"
.IX Subsection "Net::AMQP::Protocol::Exchange::DeclareOk"
This class implements the class \fBExchange\fR method \fBDeclareOk\fR, which is a synchronous method.
.PP
This method confirms a Declare method and confirms the name of the exchange, essential for automatically-named exchanges.
.PP
This class has no fields nor accessors.
.SS "Net::AMQP::Protocol::Exchange::Delete"
.IX Subsection "Net::AMQP::Protocol::Exchange::Delete"
This class implements the class \fBExchange\fR method \fBDelete\fR, which is a synchronous method.
.PP
This method deletes an exchange. When an exchange is deleted all queue bindings on the exchange are cancelled.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIticket\fR (type: short)" 4
.IX Item "ticket (type: short)"
.PD 0
.IP "\fIexchange\fR (type: shortstr)" 4
.IX Item "exchange (type: shortstr)"
.IP "\fIif_unused\fR (type: bit)" 4
.IX Item "if_unused (type: bit)"
.PD
Delete only if unused
.Sp
If set, the server will only delete the exchange if it has no queue bindings. If the exchange has queue bindings the server does not delete it but raises a channel exception instead.
.IP "\fInowait\fR (type: bit)" 4
.IX Item "nowait (type: bit)"
Do not send a reply method
.Sp
If set, the server will not respond to the method. The client should not wait for a reply method. If the server could not complete the method it will raise a channel or connection exception.
.SS "Net::AMQP::Protocol::Exchange::DeleteOk"
.IX Subsection "Net::AMQP::Protocol::Exchange::DeleteOk"
This class implements the class \fBExchange\fR method \fBDeleteOk\fR, which is a synchronous method.
.PP
This method confirms the deletion of an exchange.
.PP
This class has no fields nor accessors.
.SS "Net::AMQP::Protocol::Queue::Declare"
.IX Subsection "Net::AMQP::Protocol::Queue::Declare"
This class implements the class \fBQueue\fR method \fBDeclare\fR, which is a synchronous method.
.PP
This method creates or checks a queue. When creating a new queue the client can specify various properties that control the durability of the queue and its contents, and the level of sharing for the queue.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIticket\fR (type: short)" 4
.IX Item "ticket (type: short)"
When a client defines a new queue, this belongs to the access realm of the ticket used. All further work done with that queue must be done with an access ticket for the same realm.
.Sp
The client provides a valid access ticket giving \*(L"active\*(R" access to the realm in which the queue exists or will be created, or \*(L"passive\*(R" access if the if-exists flag is set.
.IP "\fIqueue\fR (type: shortstr)" 4
.IX Item "queue (type: shortstr)"
.PD 0
.IP "\fIpassive\fR (type: bit)" 4
.IX Item "passive (type: bit)"
.PD
Do not create queue
.Sp
If set, the server will not create the queue. The client can use this to check whether a queue exists without modifying the server state.
.IP "\fIdurable\fR (type: bit)" 4
.IX Item "durable (type: bit)"
Request a durable queue
.Sp
If set when creating a new queue, the queue will be marked as durable. Durable queues remain active when a server restarts. Non-durable queues (transient queues) are purged if/when a server restarts. Note that durable queues do not necessarily hold persistent messages, although it does not make sense to send persistent messages to a transient queue.
.IP "\fIexclusive\fR (type: bit)" 4
.IX Item "exclusive (type: bit)"
Request an exclusive queue
.Sp
Exclusive queues may only be consumed from by the current connection. Setting the 'exclusive' flag always implies 'auto\-delete'.
.IP "\fIauto_delete\fR (type: bit)" 4
.IX Item "auto_delete (type: bit)"
Auto-delete queue when unused
.Sp
If set, the queue is deleted when all consumers have finished using it. Last consumer can be cancelled either explicitly or because its channel is closed. If there was no consumer ever on the queue, it won't be deleted.
.IP "\fInowait\fR (type: bit)" 4
.IX Item "nowait (type: bit)"
Do not send a reply method
.Sp
If set, the server will not respond to the method. The client should not wait for a reply method. If the server could not complete the method it will raise a channel or connection exception.
.IP "\fIarguments\fR (type: table)" 4
.IX Item "arguments (type: table)"
Arguments for declaration
.Sp
A set of arguments for the declaration. The syntax and semantics of these arguments depends on the server implementation. This field is ignored if passive is 1.
.SS "Net::AMQP::Protocol::Queue::DeclareOk"
.IX Subsection "Net::AMQP::Protocol::Queue::DeclareOk"
This class implements the class \fBQueue\fR method \fBDeclareOk\fR, which is a synchronous method.
.PP
This method confirms a Declare method and confirms the name of the queue, essential for automatically-named queues.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIqueue\fR (type: shortstr)" 4
.IX Item "queue (type: shortstr)"
Reports the name of the queue. If the server generated a queue name, this field contains that name.
.IP "\fImessage_count\fR (type: long)" 4
.IX Item "message_count (type: long)"
Number of messages in queue
.Sp
Reports the number of messages in the queue, which will be zero for newly-created queues.
.IP "\fIconsumer_count\fR (type: long)" 4
.IX Item "consumer_count (type: long)"
Number of consumers
.Sp
Reports the number of active consumers for the queue. Note that consumers can suspend activity (Channel.Flow) in which case they do not appear in this count.
.SS "Net::AMQP::Protocol::Queue::Bind"
.IX Subsection "Net::AMQP::Protocol::Queue::Bind"
This class implements the class \fBQueue\fR method \fBBind\fR, which is a synchronous method.
.PP
This method binds a queue to an exchange. Until a queue is bound it will not receive any messages. In a classic messaging model, store-and-forward queues are bound to a dest exchange and subscription queues are bound to a dest_wild exchange.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIticket\fR (type: short)" 4
.IX Item "ticket (type: short)"
The client provides a valid access ticket giving \*(L"active\*(R" access rights to the queue's access realm.
.IP "\fIqueue\fR (type: shortstr)" 4
.IX Item "queue (type: shortstr)"
Specifies the name of the queue to bind. If the queue name is empty, refers to the current queue for the channel, which is the last declared queue.
.IP "\fIexchange\fR (type: shortstr)" 4
.IX Item "exchange (type: shortstr)"
The name of the exchange to bind to.
.IP "\fIrouting_key\fR (type: shortstr)" 4
.IX Item "routing_key (type: shortstr)"
Message routing key
.Sp
Specifies the routing key for the binding. The routing key is used for routing messages depending on the exchange configuration. Not all exchanges use a routing key \- refer to the specific exchange documentation. If the routing key is empty and the queue name is empty, the routing key will be the current queue for the channel, which is the last declared queue.
.IP "\fInowait\fR (type: bit)" 4
.IX Item "nowait (type: bit)"
Do not send a reply method
.Sp
If set, the server will not respond to the method. The client should not wait for a reply method. If the server could not complete the method it will raise a channel or connection exception.
.IP "\fIarguments\fR (type: table)" 4
.IX Item "arguments (type: table)"
Arguments for binding
.Sp
A set of arguments for the binding. The syntax and semantics of these arguments depends on the exchange class.
.SS "Net::AMQP::Protocol::Queue::BindOk"
.IX Subsection "Net::AMQP::Protocol::Queue::BindOk"
This class implements the class \fBQueue\fR method \fBBindOk\fR, which is a synchronous method.
.PP
This method confirms that the bind was successful.
.PP
This class has no fields nor accessors.
.SS "Net::AMQP::Protocol::Queue::Purge"
.IX Subsection "Net::AMQP::Protocol::Queue::Purge"
This class implements the class \fBQueue\fR method \fBPurge\fR, which is a synchronous method.
.PP
This method removes all messages from a queue. It does not cancel consumers. Purged messages are deleted without any formal \*(L"undo\*(R" mechanism.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIticket\fR (type: short)" 4
.IX Item "ticket (type: short)"
The access ticket must be for the access realm that holds the queue.
.IP "\fIqueue\fR (type: shortstr)" 4
.IX Item "queue (type: shortstr)"
Specifies the name of the queue to purge. If the queue name is empty, refers to the current queue for the channel, which is the last declared queue.
.IP "\fInowait\fR (type: bit)" 4
.IX Item "nowait (type: bit)"
Do not send a reply method
.Sp
If set, the server will not respond to the method. The client should not wait for a reply method. If the server could not complete the method it will raise a channel or connection exception.
.SS "Net::AMQP::Protocol::Queue::PurgeOk"
.IX Subsection "Net::AMQP::Protocol::Queue::PurgeOk"
This class implements the class \fBQueue\fR method \fBPurgeOk\fR, which is a synchronous method.
.PP
This method confirms the purge of a queue.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fImessage_count\fR (type: long)" 4
.IX Item "message_count (type: long)"
Number of messages purged
.Sp
Reports the number of messages purged.
.SS "Net::AMQP::Protocol::Queue::Delete"
.IX Subsection "Net::AMQP::Protocol::Queue::Delete"
This class implements the class \fBQueue\fR method \fBDelete\fR, which is a synchronous method.
.PP
This method deletes a queue. When a queue is deleted any pending messages are sent to a dead-letter queue if this is defined in the server configuration, and all consumers on the queue are cancelled.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIticket\fR (type: short)" 4
.IX Item "ticket (type: short)"
The client provides a valid access ticket giving \*(L"active\*(R" access rights to the queue's access realm.
.IP "\fIqueue\fR (type: shortstr)" 4
.IX Item "queue (type: shortstr)"
Specifies the name of the queue to delete. If the queue name is empty, refers to the current queue for the channel, which is the last declared queue.
.IP "\fIif_unused\fR (type: bit)" 4
.IX Item "if_unused (type: bit)"
Delete only if unused
.Sp
If set, the server will only delete the queue if it has no consumers. If the queue has consumers the server does does not delete it but raises a channel exception instead.
.IP "\fIif_empty\fR (type: bit)" 4
.IX Item "if_empty (type: bit)"
Delete only if empty
.Sp
If set, the server will only delete the queue if it has no messages. If the queue is not empty the server raises a channel exception.
.IP "\fInowait\fR (type: bit)" 4
.IX Item "nowait (type: bit)"
Do not send a reply method
.Sp
If set, the server will not respond to the method. The client should not wait for a reply method. If the server could not complete the method it will raise a channel or connection exception.
.SS "Net::AMQP::Protocol::Queue::DeleteOk"
.IX Subsection "Net::AMQP::Protocol::Queue::DeleteOk"
This class implements the class \fBQueue\fR method \fBDeleteOk\fR, which is a synchronous method.
.PP
This method confirms the deletion of a queue.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fImessage_count\fR (type: long)" 4
.IX Item "message_count (type: long)"
Number of messages purged
.Sp
Reports the number of messages purged.
.SS "Net::AMQP::Protocol::Basic::Qos"
.IX Subsection "Net::AMQP::Protocol::Basic::Qos"
This class implements the class \fBBasic\fR method \fBQos\fR, which is a synchronous method.
.PP
This method requests a specific quality of service. The QoS can be specified for the current channel or for all channels on the connection. The particular properties and semantics of a qos method always depend on the content class semantics. Though the qos method could in principle apply to both peers, it is currently meaningful only for the server.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIprefetch_size\fR (type: long)" 4
.IX Item "prefetch_size (type: long)"
Prefetch window in octets
.Sp
The client can request that messages be sent in advance so that when the client finishes processing a message, the following message is already held locally, rather than needing to be sent down the channel. Prefetching gives a performance improvement. This field specifies the prefetch window size in octets. The server will send a message in advance if it is equal to or smaller in size than the available prefetch size (and also falls into other prefetch limits). May be set to zero, meaning \*(L"no specific limit\*(R", although other prefetch limits may still apply. The prefetch-size is ignored if the no-ack option is set.
.IP "\fIprefetch_count\fR (type: short)" 4
.IX Item "prefetch_count (type: short)"
Prefetch window in messages
.Sp
Specifies a prefetch window in terms of whole messages. This field may be used in combination with the prefetch-size field; a message will only be sent in advance if both prefetch windows (and those at the channel and connection level) allow it. The prefetch-count is ignored if the no-ack option is set.
.IP "\fIglobal\fR (type: bit)" 4
.IX Item "global (type: bit)"
Apply to entire connection
.Sp
By default the QoS settings apply to the current channel only. If this field is set, they are applied to the entire connection.
.SS "Net::AMQP::Protocol::Basic::QosOk"
.IX Subsection "Net::AMQP::Protocol::Basic::QosOk"
This class implements the class \fBBasic\fR method \fBQosOk\fR, which is a synchronous method.
.PP
This method tells the client that the requested QoS levels could be handled by the server. The requested QoS applies to all active consumers until a new QoS is defined.
.PP
This class has no fields nor accessors.
.SS "Net::AMQP::Protocol::Basic::Consume"
.IX Subsection "Net::AMQP::Protocol::Basic::Consume"
This class implements the class \fBBasic\fR method \fBConsume\fR, which is a synchronous method.
.PP
This method asks the server to start a \*(L"consumer\*(R", which is a transient request for messages from a specific queue. Consumers last as long as the channel they were created on, or until the client cancels them.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIticket\fR (type: short)" 4
.IX Item "ticket (type: short)"
.PD 0
.IP "\fIqueue\fR (type: shortstr)" 4
.IX Item "queue (type: shortstr)"
.PD
Specifies the name of the queue to consume from. If the queue name is null, refers to the current queue for the channel, which is the last declared queue.
.IP "\fIconsumer_tag\fR (type: shortstr)" 4
.IX Item "consumer_tag (type: shortstr)"
Specifies the identifier for the consumer. The consumer tag is local to a connection, so two clients can use the same consumer tags. If this field is empty the server will generate a unique tag.
.IP "\fIno_local\fR (type: bit)" 4
.IX Item "no_local (type: bit)"
.PD 0
.IP "\fIno_ack\fR (type: bit)" 4
.IX Item "no_ack (type: bit)"
.IP "\fIexclusive\fR (type: bit)" 4
.IX Item "exclusive (type: bit)"
.PD
Request exclusive access
.Sp
Request exclusive consumer access, meaning only this consumer can access the queue.
.IP "\fInowait\fR (type: bit)" 4
.IX Item "nowait (type: bit)"
Do not send a reply method
.Sp
If set, the server will not respond to the method. The client should not wait for a reply method. If the server could not complete the method it will raise a channel or connection exception.
.SS "Net::AMQP::Protocol::Basic::ConsumeOk"
.IX Subsection "Net::AMQP::Protocol::Basic::ConsumeOk"
This class implements the class \fBBasic\fR method \fBConsumeOk\fR, which is a synchronous method.
.PP
The server provides the client with a consumer tag, which is used by the client for methods called on the consumer at a later stage.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIconsumer_tag\fR (type: shortstr)" 4
.IX Item "consumer_tag (type: shortstr)"
Holds the consumer tag specified by the client or provided by the server.
.SS "Net::AMQP::Protocol::Basic::Cancel"
.IX Subsection "Net::AMQP::Protocol::Basic::Cancel"
This class implements the class \fBBasic\fR method \fBCancel\fR, which is a synchronous method.
.PP
This method cancels a consumer. This does not affect already delivered messages, but it does mean the server will not send any more messages for that consumer. The client may receive an abitrary number of messages in between sending the cancel method and receiving the cancel-ok reply.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIconsumer_tag\fR (type: shortstr)" 4
.IX Item "consumer_tag (type: shortstr)"
.PD 0
.IP "\fInowait\fR (type: bit)" 4
.IX Item "nowait (type: bit)"
.PD
Do not send a reply method
.Sp
If set, the server will not respond to the method. The client should not wait for a reply method. If the server could not complete the method it will raise a channel or connection exception.
.SS "Net::AMQP::Protocol::Basic::CancelOk"
.IX Subsection "Net::AMQP::Protocol::Basic::CancelOk"
This class implements the class \fBBasic\fR method \fBCancelOk\fR, which is a synchronous method.
.PP
This method confirms that the cancellation was completed.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIconsumer_tag\fR (type: shortstr)" 4
.IX Item "consumer_tag (type: shortstr)"
.SS "Net::AMQP::Protocol::Basic::Publish"
.IX Subsection "Net::AMQP::Protocol::Basic::Publish"
This class implements the class \fBBasic\fR method \fBPublish\fR, which is an asynchronous method.
.PP
This method publishes a message to a specific exchange. The message will be routed to queues as defined by the exchange configuration and distributed to any active consumers when the transaction, if any, is committed.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIticket\fR (type: short)" 4
.IX Item "ticket (type: short)"
.PD 0
.IP "\fIexchange\fR (type: shortstr)" 4
.IX Item "exchange (type: shortstr)"
.PD
Specifies the name of the exchange to publish to. The exchange name can be empty, meaning the default exchange. If the exchange name is specified, and that exchange does not exist, the server will raise a channel exception.
.IP "\fIrouting_key\fR (type: shortstr)" 4
.IX Item "routing_key (type: shortstr)"
Message routing key
.Sp
Specifies the routing key for the message. The routing key is used for routing messages depending on the exchange configuration.
.IP "\fImandatory\fR (type: bit)" 4
.IX Item "mandatory (type: bit)"
Indicate mandatory routing
.Sp
This flag tells the server how to react if the message cannot be routed to a queue. If this flag is set, the server will return an unroutable message with a Return method. If this flag is zero, the server silently drops the message.
.IP "\fIimmediate\fR (type: bit)" 4
.IX Item "immediate (type: bit)"
Request immediate delivery
.Sp
This flag tells the server how to react if the message cannot be routed to a queue consumer immediately. If this flag is set, the server will return an undeliverable message with a Return method. If this flag is zero, the server will queue the message, but with no guarantee that it will ever be consumed.
.SS "Net::AMQP::Protocol::Basic::Return"
.IX Subsection "Net::AMQP::Protocol::Basic::Return"
This class implements the class \fBBasic\fR method \fBReturn\fR, which is an asynchronous method.
.PP
This method returns an undeliverable message that was published with the \*(L"immediate\*(R" flag set, or an unroutable message published with the \*(L"mandatory\*(R" flag set. The reply code and text provide information about the reason that the message was undeliverable.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIreply_code\fR (type: short)" 4
.IX Item "reply_code (type: short)"
.PD 0
.IP "\fIreply_text\fR (type: shortstr)" 4
.IX Item "reply_text (type: shortstr)"
.IP "\fIexchange\fR (type: shortstr)" 4
.IX Item "exchange (type: shortstr)"
.PD
Specifies the name of the exchange that the message was originally published to.
.IP "\fIrouting_key\fR (type: shortstr)" 4
.IX Item "routing_key (type: shortstr)"
Message routing key
.Sp
Specifies the routing key name specified when the message was published.
.SS "Net::AMQP::Protocol::Basic::Deliver"
.IX Subsection "Net::AMQP::Protocol::Basic::Deliver"
This class implements the class \fBBasic\fR method \fBDeliver\fR, which is an asynchronous method.
.PP
This method delivers a message to the client, via a consumer. In the asynchronous message delivery model, the client starts a consumer using the Consume method, then the server responds with Deliver methods as and when messages arrive for that consumer.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIconsumer_tag\fR (type: shortstr)" 4
.IX Item "consumer_tag (type: shortstr)"
.PD 0
.IP "\fIdelivery_tag\fR (type: longlong)" 4
.IX Item "delivery_tag (type: longlong)"
.IP "\fIredelivered\fR (type: bit)" 4
.IX Item "redelivered (type: bit)"
.IP "\fIexchange\fR (type: shortstr)" 4
.IX Item "exchange (type: shortstr)"
.PD
Specifies the name of the exchange that the message was originally published to.
.IP "\fIrouting_key\fR (type: shortstr)" 4
.IX Item "routing_key (type: shortstr)"
Message routing key
.Sp
Specifies the routing key name specified when the message was published.
.SS "Net::AMQP::Protocol::Basic::Get"
.IX Subsection "Net::AMQP::Protocol::Basic::Get"
This class implements the class \fBBasic\fR method \fBGet\fR, which is a synchronous method.
.PP
This method provides a direct access to the messages in a queue using a synchronous dialogue that is designed for specific types of application where synchronous functionality is more important than performance.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIticket\fR (type: short)" 4
.IX Item "ticket (type: short)"
.PD 0
.IP "\fIqueue\fR (type: shortstr)" 4
.IX Item "queue (type: shortstr)"
.PD
Specifies the name of the queue to consume from. If the queue name is null, refers to the current queue for the channel, which is the last declared queue.
.IP "\fIno_ack\fR (type: bit)" 4
.IX Item "no_ack (type: bit)"
.SS "Net::AMQP::Protocol::Basic::GetOk"
.IX Subsection "Net::AMQP::Protocol::Basic::GetOk"
This class implements the class \fBBasic\fR method \fBGetOk\fR, which is a synchronous method.
.PP
This method delivers a message to the client following a get method. A message delivered by 'get\-ok' must be acknowledged unless the no-ack option was set in the get method.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIdelivery_tag\fR (type: longlong)" 4
.IX Item "delivery_tag (type: longlong)"
.PD 0
.IP "\fIredelivered\fR (type: bit)" 4
.IX Item "redelivered (type: bit)"
.IP "\fIexchange\fR (type: shortstr)" 4
.IX Item "exchange (type: shortstr)"
.PD
Specifies the name of the exchange that the message was originally published to. If empty, the message was published to the default exchange.
.IP "\fIrouting_key\fR (type: shortstr)" 4
.IX Item "routing_key (type: shortstr)"
Message routing key
.Sp
Specifies the routing key name specified when the message was published.
.IP "\fImessage_count\fR (type: long)" 4
.IX Item "message_count (type: long)"
Number of messages pending
.Sp
This field reports the number of messages pending on the queue, excluding the message being delivered. Note that this figure is indicative, not reliable, and can change arbitrarily as messages are added to the queue and removed by other clients.
.SS "Net::AMQP::Protocol::Basic::GetEmpty"
.IX Subsection "Net::AMQP::Protocol::Basic::GetEmpty"
This class implements the class \fBBasic\fR method \fBGetEmpty\fR, which is a synchronous method.
.PP
This method tells the client that the queue has no messages available for the client.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIcluster_id\fR (type: shortstr)" 4
.IX Item "cluster_id (type: shortstr)"
Cluster id
.Sp
For use by cluster applications, should not be used by client applications.
.SS "Net::AMQP::Protocol::Basic::Ack"
.IX Subsection "Net::AMQP::Protocol::Basic::Ack"
This class implements the class \fBBasic\fR method \fBAck\fR, which is an asynchronous method.
.PP
This method acknowledges one or more messages delivered via the Deliver or Get-Ok methods. The client can ask to confirm a single message or a set of messages up to and including a specific message.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIdelivery_tag\fR (type: longlong)" 4
.IX Item "delivery_tag (type: longlong)"
.PD 0
.IP "\fImultiple\fR (type: bit)" 4
.IX Item "multiple (type: bit)"
.PD
Acknowledge multiple messages
.Sp
If set to 1, the delivery tag is treated as \*(L"up to and including\*(R", so that the client can acknowledge multiple messages with a single method. If set to zero, the delivery tag refers to a single message. If the multiple field is 1, and the delivery tag is zero, tells the server to acknowledge all outstanding mesages.
.SS "Net::AMQP::Protocol::Basic::Reject"
.IX Subsection "Net::AMQP::Protocol::Basic::Reject"
This class implements the class \fBBasic\fR method \fBReject\fR, which is an asynchronous method.
.PP
This method allows a client to reject a message. It can be used to interrupt and cancel large incoming messages, or return untreatable messages to their original queue.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIdelivery_tag\fR (type: longlong)" 4
.IX Item "delivery_tag (type: longlong)"
.PD 0
.IP "\fIrequeue\fR (type: bit)" 4
.IX Item "requeue (type: bit)"
.PD
Requeue the message
.Sp
If this field is zero, the message will be discarded. If this bit is 1, the server will attempt to requeue the message.
.SS "Net::AMQP::Protocol::Basic::Recover"
.IX Subsection "Net::AMQP::Protocol::Basic::Recover"
This class implements the class \fBBasic\fR method \fBRecover\fR, which is an asynchronous method.
.PP
This method asks the broker to redeliver all unacknowledged messages on a specifieid channel. Zero or more messages may be redelivered.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIrequeue\fR (type: bit)" 4
.IX Item "requeue (type: bit)"
Requeue the message
.Sp
If this field is zero, the message will be redelivered to the original recipient. If this bit is 1, the server will attempt to requeue the message, potentially then delivering it to an alternative subscriber.
.SS "Net::AMQP::Protocol::Basic::ContentHeader"
.IX Subsection "Net::AMQP::Protocol::Basic::ContentHeader"
This class implements the class \fBBasic\fR method \fBContentHeader\fR, which is an asynchronous method.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIcontent_type\fR (type: shortstr)" 4
.IX Item "content_type (type: shortstr)"
.PD 0
.IP "\fIcontent_encoding\fR (type: shortstr)" 4
.IX Item "content_encoding (type: shortstr)"
.IP "\fIheaders\fR (type: table)" 4
.IX Item "headers (type: table)"
.IP "\fIdelivery_mode\fR (type: octet)" 4
.IX Item "delivery_mode (type: octet)"
.IP "\fIpriority\fR (type: octet)" 4
.IX Item "priority (type: octet)"
.IP "\fIcorrelation_id\fR (type: shortstr)" 4
.IX Item "correlation_id (type: shortstr)"
.IP "\fIreply_to\fR (type: shortstr)" 4
.IX Item "reply_to (type: shortstr)"
.IP "\fIexpiration\fR (type: shortstr)" 4
.IX Item "expiration (type: shortstr)"
.IP "\fImessage_id\fR (type: shortstr)" 4
.IX Item "message_id (type: shortstr)"
.IP "\fItimestamp\fR (type: timestamp)" 4
.IX Item "timestamp (type: timestamp)"
.IP "\fItype\fR (type: shortstr)" 4
.IX Item "type (type: shortstr)"
.IP "\fIuser_id\fR (type: shortstr)" 4
.IX Item "user_id (type: shortstr)"
.IP "\fIapp_id\fR (type: shortstr)" 4
.IX Item "app_id (type: shortstr)"
.IP "\fIcluster_id\fR (type: shortstr)" 4
.IX Item "cluster_id (type: shortstr)"
.PD
.SS "Net::AMQP::Protocol::File::Qos"
.IX Subsection "Net::AMQP::Protocol::File::Qos"
This class implements the class \fBFile\fR method \fBQos\fR, which is a synchronous method.
.PP
This method requests a specific quality of service. The QoS can be specified for the current channel or for all channels on the connection. The particular properties and semantics of a qos method always depend on the content class semantics. Though the qos method could in principle apply to both peers, it is currently meaningful only for the server.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIprefetch_size\fR (type: long)" 4
.IX Item "prefetch_size (type: long)"
Prefetch window in octets
.Sp
The client can request that messages be sent in advance so that when the client finishes processing a message, the following message is already held locally, rather than needing to be sent down the channel. Prefetching gives a performance improvement. This field specifies the prefetch window size in octets. May be set to zero, meaning \*(L"no specific limit\*(R". Note that other prefetch limits may still apply. The prefetch-size is ignored if the no-ack option is set.
.IP "\fIprefetch_count\fR (type: short)" 4
.IX Item "prefetch_count (type: short)"
Prefetch window in messages
.Sp
Specifies a prefetch window in terms of whole messages. This is compatible with some file \s-1API\s0 implementations. This field may be used in combination with the prefetch-size field; a message will only be sent in advance if both prefetch windows (and those at the channel and connection level) allow it. The prefetch-count is ignored if the no-ack option is set.
.IP "\fIglobal\fR (type: bit)" 4
.IX Item "global (type: bit)"
Apply to entire connection
.Sp
By default the QoS settings apply to the current channel only. If this field is set, they are applied to the entire connection.
.SS "Net::AMQP::Protocol::File::QosOk"
.IX Subsection "Net::AMQP::Protocol::File::QosOk"
This class implements the class \fBFile\fR method \fBQosOk\fR, which is a synchronous method.
.PP
This method tells the client that the requested QoS levels could be handled by the server. The requested QoS applies to all active consumers until a new QoS is defined.
.PP
This class has no fields nor accessors.
.SS "Net::AMQP::Protocol::File::Consume"
.IX Subsection "Net::AMQP::Protocol::File::Consume"
This class implements the class \fBFile\fR method \fBConsume\fR, which is a synchronous method.
.PP
This method asks the server to start a \*(L"consumer\*(R", which is a transient request for messages from a specific queue. Consumers last as long as the channel they were created on, or until the client cancels them.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIticket\fR (type: short)" 4
.IX Item "ticket (type: short)"
.PD 0
.IP "\fIqueue\fR (type: shortstr)" 4
.IX Item "queue (type: shortstr)"
.PD
Specifies the name of the queue to consume from. If the queue name is null, refers to the current queue for the channel, which is the last declared queue.
.IP "\fIconsumer_tag\fR (type: shortstr)" 4
.IX Item "consumer_tag (type: shortstr)"
Specifies the identifier for the consumer. The consumer tag is local to a connection, so two clients can use the same consumer tags. If this field is empty the server will generate a unique tag.
.IP "\fIno_local\fR (type: bit)" 4
.IX Item "no_local (type: bit)"
.PD 0
.IP "\fIno_ack\fR (type: bit)" 4
.IX Item "no_ack (type: bit)"
.IP "\fIexclusive\fR (type: bit)" 4
.IX Item "exclusive (type: bit)"
.PD
Request exclusive access
.Sp
Request exclusive consumer access, meaning only this consumer can access the queue.
.IP "\fInowait\fR (type: bit)" 4
.IX Item "nowait (type: bit)"
Do not send a reply method
.Sp
If set, the server will not respond to the method. The client should not wait for a reply method. If the server could not complete the method it will raise a channel or connection exception.
.SS "Net::AMQP::Protocol::File::ConsumeOk"
.IX Subsection "Net::AMQP::Protocol::File::ConsumeOk"
This class implements the class \fBFile\fR method \fBConsumeOk\fR, which is a synchronous method.
.PP
This method provides the client with a consumer tag which it \s-1MUST\s0 use in methods that work with the consumer.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIconsumer_tag\fR (type: shortstr)" 4
.IX Item "consumer_tag (type: shortstr)"
Holds the consumer tag specified by the client or provided by the server.
.SS "Net::AMQP::Protocol::File::Cancel"
.IX Subsection "Net::AMQP::Protocol::File::Cancel"
This class implements the class \fBFile\fR method \fBCancel\fR, which is a synchronous method.
.PP
This method cancels a consumer. This does not affect already delivered messages, but it does mean the server will not send any more messages for that consumer.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIconsumer_tag\fR (type: shortstr)" 4
.IX Item "consumer_tag (type: shortstr)"
.PD 0
.IP "\fInowait\fR (type: bit)" 4
.IX Item "nowait (type: bit)"
.PD
Do not send a reply method
.Sp
If set, the server will not respond to the method. The client should not wait for a reply method. If the server could not complete the method it will raise a channel or connection exception.
.SS "Net::AMQP::Protocol::File::CancelOk"
.IX Subsection "Net::AMQP::Protocol::File::CancelOk"
This class implements the class \fBFile\fR method \fBCancelOk\fR, which is a synchronous method.
.PP
This method confirms that the cancellation was completed.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIconsumer_tag\fR (type: shortstr)" 4
.IX Item "consumer_tag (type: shortstr)"
.SS "Net::AMQP::Protocol::File::Open"
.IX Subsection "Net::AMQP::Protocol::File::Open"
This class implements the class \fBFile\fR method \fBOpen\fR, which is a synchronous method.
.PP
This method requests permission to start staging a message. Staging means sending the message into a temporary area at the recipient end and then delivering the message by referring to this temporary area. Staging is how the protocol handles partial file transfers \- if a message is partially staged and the connection breaks, the next time the sender starts to stage it, it can restart from where it left off.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIidentifier\fR (type: shortstr)" 4
.IX Item "identifier (type: shortstr)"
Staging identifier
.Sp
This is the staging identifier. This is an arbitrary string chosen by the sender. For staging to work correctly the sender must use the same staging identifier when staging the same message a second time after recovery from a failure. A good choice for the staging identifier would be the \s-1SHA1\s0 hash of the message properties data (including the original filename, revised time, etc.).
.IP "\fIcontent_size\fR (type: longlong)" 4
.IX Item "content_size (type: longlong)"
Message content size
.Sp
The size of the content in octets. The recipient may use this information to allocate or check available space in advance, to avoid \*(L"disk full\*(R" errors during staging of very large messages.
.SS "Net::AMQP::Protocol::File::OpenOk"
.IX Subsection "Net::AMQP::Protocol::File::OpenOk"
This class implements the class \fBFile\fR method \fBOpenOk\fR, which is a synchronous method.
.PP
This method confirms that the recipient is ready to accept staged data. If the message was already partially-staged at a previous time the recipient will report the number of octets already staged.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIstaged_size\fR (type: longlong)" 4
.IX Item "staged_size (type: longlong)"
Already staged amount
.Sp
The amount of previously-staged content in octets. For a new message this will be zero.
.SS "Net::AMQP::Protocol::File::Stage"
.IX Subsection "Net::AMQP::Protocol::File::Stage"
This class implements the class \fBFile\fR method \fBStage\fR, which is an asynchronous method.
.PP
This method stages the message, sending the message content to the recipient from the octet offset specified in the Open-Ok method.
.PP
This class has no fields nor accessors.
.SS "Net::AMQP::Protocol::File::Publish"
.IX Subsection "Net::AMQP::Protocol::File::Publish"
This class implements the class \fBFile\fR method \fBPublish\fR, which is an asynchronous method.
.PP
This method publishes a staged file message to a specific exchange. The file message will be routed to queues as defined by the exchange configuration and distributed to any active consumers when the transaction, if any, is committed.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIticket\fR (type: short)" 4
.IX Item "ticket (type: short)"
.PD 0
.IP "\fIexchange\fR (type: shortstr)" 4
.IX Item "exchange (type: shortstr)"
.PD
Specifies the name of the exchange to publish to. The exchange name can be empty, meaning the default exchange. If the exchange name is specified, and that exchange does not exist, the server will raise a channel exception.
.IP "\fIrouting_key\fR (type: shortstr)" 4
.IX Item "routing_key (type: shortstr)"
Message routing key
.Sp
Specifies the routing key for the message. The routing key is used for routing messages depending on the exchange configuration.
.IP "\fImandatory\fR (type: bit)" 4
.IX Item "mandatory (type: bit)"
Indicate mandatory routing
.Sp
This flag tells the server how to react if the message cannot be routed to a queue. If this flag is set, the server will return an unroutable message with a Return method. If this flag is zero, the server silently drops the message.
.IP "\fIimmediate\fR (type: bit)" 4
.IX Item "immediate (type: bit)"
Request immediate delivery
.Sp
This flag tells the server how to react if the message cannot be routed to a queue consumer immediately. If this flag is set, the server will return an undeliverable message with a Return method. If this flag is zero, the server will queue the message, but with no guarantee that it will ever be consumed.
.IP "\fIidentifier\fR (type: shortstr)" 4
.IX Item "identifier (type: shortstr)"
Staging identifier
.Sp
This is the staging identifier of the message to publish. The message must have been staged. Note that a client can send the Publish method asynchronously without waiting for staging to finish.
.SS "Net::AMQP::Protocol::File::Return"
.IX Subsection "Net::AMQP::Protocol::File::Return"
This class implements the class \fBFile\fR method \fBReturn\fR, which is an asynchronous method.
.PP
This method returns an undeliverable message that was published with the \*(L"immediate\*(R" flag set, or an unroutable message published with the \*(L"mandatory\*(R" flag set. The reply code and text provide information about the reason that the message was undeliverable.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIreply_code\fR (type: short)" 4
.IX Item "reply_code (type: short)"
.PD 0
.IP "\fIreply_text\fR (type: shortstr)" 4
.IX Item "reply_text (type: shortstr)"
.IP "\fIexchange\fR (type: shortstr)" 4
.IX Item "exchange (type: shortstr)"
.PD
Specifies the name of the exchange that the message was originally published to.
.IP "\fIrouting_key\fR (type: shortstr)" 4
.IX Item "routing_key (type: shortstr)"
Message routing key
.Sp
Specifies the routing key name specified when the message was published.
.SS "Net::AMQP::Protocol::File::Deliver"
.IX Subsection "Net::AMQP::Protocol::File::Deliver"
This class implements the class \fBFile\fR method \fBDeliver\fR, which is an asynchronous method.
.PP
This method delivers a staged file message to the client, via a consumer. In the asynchronous message delivery model, the client starts a consumer using the Consume method, then the server responds with Deliver methods as and when messages arrive for that consumer.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIconsumer_tag\fR (type: shortstr)" 4
.IX Item "consumer_tag (type: shortstr)"
.PD 0
.IP "\fIdelivery_tag\fR (type: longlong)" 4
.IX Item "delivery_tag (type: longlong)"
.IP "\fIredelivered\fR (type: bit)" 4
.IX Item "redelivered (type: bit)"
.IP "\fIexchange\fR (type: shortstr)" 4
.IX Item "exchange (type: shortstr)"
.PD
Specifies the name of the exchange that the message was originally published to.
.IP "\fIrouting_key\fR (type: shortstr)" 4
.IX Item "routing_key (type: shortstr)"
Message routing key
.Sp
Specifies the routing key name specified when the message was published.
.IP "\fIidentifier\fR (type: shortstr)" 4
.IX Item "identifier (type: shortstr)"
Staging identifier
.Sp
This is the staging identifier of the message to deliver. The message must have been staged. Note that a server can send the Deliver method asynchronously without waiting for staging to finish.
.SS "Net::AMQP::Protocol::File::Ack"
.IX Subsection "Net::AMQP::Protocol::File::Ack"
This class implements the class \fBFile\fR method \fBAck\fR, which is an asynchronous method.
.PP
This method acknowledges one or more messages delivered via the Deliver method. The client can ask to confirm a single message or a set of messages up to and including a specific message.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIdelivery_tag\fR (type: longlong)" 4
.IX Item "delivery_tag (type: longlong)"
.PD 0
.IP "\fImultiple\fR (type: bit)" 4
.IX Item "multiple (type: bit)"
.PD
Acknowledge multiple messages
.Sp
If set to 1, the delivery tag is treated as \*(L"up to and including\*(R", so that the client can acknowledge multiple messages with a single method. If set to zero, the delivery tag refers to a single message. If the multiple field is 1, and the delivery tag is zero, tells the server to acknowledge all outstanding mesages.
.SS "Net::AMQP::Protocol::File::Reject"
.IX Subsection "Net::AMQP::Protocol::File::Reject"
This class implements the class \fBFile\fR method \fBReject\fR, which is an asynchronous method.
.PP
This method allows a client to reject a message. It can be used to return untreatable messages to their original queue. Note that file content is staged before delivery, so the client will not use this method to interrupt delivery of a large message.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIdelivery_tag\fR (type: longlong)" 4
.IX Item "delivery_tag (type: longlong)"
.PD 0
.IP "\fIrequeue\fR (type: bit)" 4
.IX Item "requeue (type: bit)"
.PD
Requeue the message
.Sp
If this field is zero, the message will be discarded. If this bit is 1, the server will attempt to requeue the message.
.SS "Net::AMQP::Protocol::File::ContentHeader"
.IX Subsection "Net::AMQP::Protocol::File::ContentHeader"
This class implements the class \fBFile\fR method \fBContentHeader\fR, which is an asynchronous method.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIcontent_type\fR (type: shortstr)" 4
.IX Item "content_type (type: shortstr)"
.PD 0
.IP "\fIcontent_encoding\fR (type: shortstr)" 4
.IX Item "content_encoding (type: shortstr)"
.IP "\fIheaders\fR (type: table)" 4
.IX Item "headers (type: table)"
.IP "\fIpriority\fR (type: octet)" 4
.IX Item "priority (type: octet)"
.IP "\fIreply_to\fR (type: shortstr)" 4
.IX Item "reply_to (type: shortstr)"
.IP "\fImessage_id\fR (type: shortstr)" 4
.IX Item "message_id (type: shortstr)"
.IP "\fIfilename\fR (type: shortstr)" 4
.IX Item "filename (type: shortstr)"
.IP "\fItimestamp\fR (type: timestamp)" 4
.IX Item "timestamp (type: timestamp)"
.IP "\fIcluster_id\fR (type: shortstr)" 4
.IX Item "cluster_id (type: shortstr)"
.PD
.SS "Net::AMQP::Protocol::Stream::Qos"
.IX Subsection "Net::AMQP::Protocol::Stream::Qos"
This class implements the class \fBStream\fR method \fBQos\fR, which is a synchronous method.
.PP
This method requests a specific quality of service. The QoS can be specified for the current channel or for all channels on the connection. The particular properties and semantics of a qos method always depend on the content class semantics. Though the qos method could in principle apply to both peers, it is currently meaningful only for the server.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIprefetch_size\fR (type: long)" 4
.IX Item "prefetch_size (type: long)"
Prefetch window in octets
.Sp
The client can request that messages be sent in advance so that when the client finishes processing a message, the following message is already held locally, rather than needing to be sent down the channel. Prefetching gives a performance improvement. This field specifies the prefetch window size in octets. May be set to zero, meaning \*(L"no specific limit\*(R". Note that other prefetch limits may still apply.
.IP "\fIprefetch_count\fR (type: short)" 4
.IX Item "prefetch_count (type: short)"
Prefetch window in messages
.Sp
Specifies a prefetch window in terms of whole messages. This field may be used in combination with the prefetch-size field; a message will only be sent in advance if both prefetch windows (and those at the channel and connection level) allow it.
.IP "\fIconsume_rate\fR (type: long)" 4
.IX Item "consume_rate (type: long)"
Transfer rate in octets/second
.Sp
Specifies a desired transfer rate in octets per second. This is usually determined by the application that uses the streaming data. A value of zero means \*(L"no limit\*(R", i.e. as rapidly as possible.
.IP "\fIglobal\fR (type: bit)" 4
.IX Item "global (type: bit)"
Apply to entire connection
.Sp
By default the QoS settings apply to the current channel only. If this field is set, they are applied to the entire connection.
.SS "Net::AMQP::Protocol::Stream::QosOk"
.IX Subsection "Net::AMQP::Protocol::Stream::QosOk"
This class implements the class \fBStream\fR method \fBQosOk\fR, which is a synchronous method.
.PP
This method tells the client that the requested QoS levels could be handled by the server. The requested QoS applies to all active consumers until a new QoS is defined.
.PP
This class has no fields nor accessors.
.SS "Net::AMQP::Protocol::Stream::Consume"
.IX Subsection "Net::AMQP::Protocol::Stream::Consume"
This class implements the class \fBStream\fR method \fBConsume\fR, which is a synchronous method.
.PP
This method asks the server to start a \*(L"consumer\*(R", which is a transient request for messages from a specific queue. Consumers last as long as the channel they were created on, or until the client cancels them.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIticket\fR (type: short)" 4
.IX Item "ticket (type: short)"
.PD 0
.IP "\fIqueue\fR (type: shortstr)" 4
.IX Item "queue (type: shortstr)"
.PD
Specifies the name of the queue to consume from. If the queue name is null, refers to the current queue for the channel, which is the last declared queue.
.IP "\fIconsumer_tag\fR (type: shortstr)" 4
.IX Item "consumer_tag (type: shortstr)"
Specifies the identifier for the consumer. The consumer tag is local to a connection, so two clients can use the same consumer tags. If this field is empty the server will generate a unique tag.
.IP "\fIno_local\fR (type: bit)" 4
.IX Item "no_local (type: bit)"
.PD 0
.IP "\fIexclusive\fR (type: bit)" 4
.IX Item "exclusive (type: bit)"
.PD
Request exclusive access
.Sp
Request exclusive consumer access, meaning only this consumer can access the queue.
.IP "\fInowait\fR (type: bit)" 4
.IX Item "nowait (type: bit)"
Do not send a reply method
.Sp
If set, the server will not respond to the method. The client should not wait for a reply method. If the server could not complete the method it will raise a channel or connection exception.
.SS "Net::AMQP::Protocol::Stream::ConsumeOk"
.IX Subsection "Net::AMQP::Protocol::Stream::ConsumeOk"
This class implements the class \fBStream\fR method \fBConsumeOk\fR, which is a synchronous method.
.PP
This method provides the client with a consumer tag which it may use in methods that work with the consumer.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIconsumer_tag\fR (type: shortstr)" 4
.IX Item "consumer_tag (type: shortstr)"
Holds the consumer tag specified by the client or provided by the server.
.SS "Net::AMQP::Protocol::Stream::Cancel"
.IX Subsection "Net::AMQP::Protocol::Stream::Cancel"
This class implements the class \fBStream\fR method \fBCancel\fR, which is a synchronous method.
.PP
This method cancels a consumer. Since message delivery is asynchronous the client may continue to receive messages for a short while after canceling a consumer. It may process or discard these as appropriate.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIconsumer_tag\fR (type: shortstr)" 4
.IX Item "consumer_tag (type: shortstr)"
.PD 0
.IP "\fInowait\fR (type: bit)" 4
.IX Item "nowait (type: bit)"
.PD
Do not send a reply method
.Sp
If set, the server will not respond to the method. The client should not wait for a reply method. If the server could not complete the method it will raise a channel or connection exception.
.SS "Net::AMQP::Protocol::Stream::CancelOk"
.IX Subsection "Net::AMQP::Protocol::Stream::CancelOk"
This class implements the class \fBStream\fR method \fBCancelOk\fR, which is a synchronous method.
.PP
This method confirms that the cancellation was completed.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIconsumer_tag\fR (type: shortstr)" 4
.IX Item "consumer_tag (type: shortstr)"
.SS "Net::AMQP::Protocol::Stream::Publish"
.IX Subsection "Net::AMQP::Protocol::Stream::Publish"
This class implements the class \fBStream\fR method \fBPublish\fR, which is an asynchronous method.
.PP
This method publishes a message to a specific exchange. The message will be routed to queues as defined by the exchange configuration and distributed to any active consumers as appropriate.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIticket\fR (type: short)" 4
.IX Item "ticket (type: short)"
.PD 0
.IP "\fIexchange\fR (type: shortstr)" 4
.IX Item "exchange (type: shortstr)"
.PD
Specifies the name of the exchange to publish to. The exchange name can be empty, meaning the default exchange. If the exchange name is specified, and that exchange does not exist, the server will raise a channel exception.
.IP "\fIrouting_key\fR (type: shortstr)" 4
.IX Item "routing_key (type: shortstr)"
Message routing key
.Sp
Specifies the routing key for the message. The routing key is used for routing messages depending on the exchange configuration.
.IP "\fImandatory\fR (type: bit)" 4
.IX Item "mandatory (type: bit)"
Indicate mandatory routing
.Sp
This flag tells the server how to react if the message cannot be routed to a queue. If this flag is set, the server will return an unroutable message with a Return method. If this flag is zero, the server silently drops the message.
.IP "\fIimmediate\fR (type: bit)" 4
.IX Item "immediate (type: bit)"
Request immediate delivery
.Sp
This flag tells the server how to react if the message cannot be routed to a queue consumer immediately. If this flag is set, the server will return an undeliverable message with a Return method. If this flag is zero, the server will queue the message, but with no guarantee that it will ever be consumed.
.SS "Net::AMQP::Protocol::Stream::Return"
.IX Subsection "Net::AMQP::Protocol::Stream::Return"
This class implements the class \fBStream\fR method \fBReturn\fR, which is an asynchronous method.
.PP
This method returns an undeliverable message that was published with the \*(L"immediate\*(R" flag set, or an unroutable message published with the \*(L"mandatory\*(R" flag set. The reply code and text provide information about the reason that the message was undeliverable.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIreply_code\fR (type: short)" 4
.IX Item "reply_code (type: short)"
.PD 0
.IP "\fIreply_text\fR (type: shortstr)" 4
.IX Item "reply_text (type: shortstr)"
.IP "\fIexchange\fR (type: shortstr)" 4
.IX Item "exchange (type: shortstr)"
.PD
Specifies the name of the exchange that the message was originally published to.
.IP "\fIrouting_key\fR (type: shortstr)" 4
.IX Item "routing_key (type: shortstr)"
Message routing key
.Sp
Specifies the routing key name specified when the message was published.
.SS "Net::AMQP::Protocol::Stream::Deliver"
.IX Subsection "Net::AMQP::Protocol::Stream::Deliver"
This class implements the class \fBStream\fR method \fBDeliver\fR, which is an asynchronous method.
.PP
This method delivers a message to the client, via a consumer. In the asynchronous message delivery model, the client starts a consumer using the Consume method, then the server responds with Deliver methods as and when messages arrive for that consumer.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIconsumer_tag\fR (type: shortstr)" 4
.IX Item "consumer_tag (type: shortstr)"
.PD 0
.IP "\fIdelivery_tag\fR (type: longlong)" 4
.IX Item "delivery_tag (type: longlong)"
.IP "\fIexchange\fR (type: shortstr)" 4
.IX Item "exchange (type: shortstr)"
.PD
Specifies the name of the exchange that the message was originally published to.
.IP "\fIqueue\fR (type: shortstr)" 4
.IX Item "queue (type: shortstr)"
Specifies the name of the queue that the message came from. Note that a single channel can start many consumers on different queues.
.SS "Net::AMQP::Protocol::Stream::ContentHeader"
.IX Subsection "Net::AMQP::Protocol::Stream::ContentHeader"
This class implements the class \fBStream\fR method \fBContentHeader\fR, which is an asynchronous method.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIcontent_type\fR (type: shortstr)" 4
.IX Item "content_type (type: shortstr)"
.PD 0
.IP "\fIcontent_encoding\fR (type: shortstr)" 4
.IX Item "content_encoding (type: shortstr)"
.IP "\fIheaders\fR (type: table)" 4
.IX Item "headers (type: table)"
.IP "\fIpriority\fR (type: octet)" 4
.IX Item "priority (type: octet)"
.IP "\fItimestamp\fR (type: timestamp)" 4
.IX Item "timestamp (type: timestamp)"
.PD
.SS "Net::AMQP::Protocol::Tx::Select"
.IX Subsection "Net::AMQP::Protocol::Tx::Select"
This class implements the class \fBTx\fR method \fBSelect\fR, which is a synchronous method.
.PP
This method sets the channel to use standard transactions. The client must use this method at least once on a channel before using the Commit or Rollback methods.
.PP
This class has no fields nor accessors.
.SS "Net::AMQP::Protocol::Tx::SelectOk"
.IX Subsection "Net::AMQP::Protocol::Tx::SelectOk"
This class implements the class \fBTx\fR method \fBSelectOk\fR, which is a synchronous method.
.PP
This method confirms to the client that the channel was successfully set to use standard transactions.
.PP
This class has no fields nor accessors.
.SS "Net::AMQP::Protocol::Tx::Commit"
.IX Subsection "Net::AMQP::Protocol::Tx::Commit"
This class implements the class \fBTx\fR method \fBCommit\fR, which is a synchronous method.
.PP
This method commits all messages published and acknowledged in the current transaction. A new transaction starts immediately after a commit.
.PP
This class has no fields nor accessors.
.SS "Net::AMQP::Protocol::Tx::CommitOk"
.IX Subsection "Net::AMQP::Protocol::Tx::CommitOk"
This class implements the class \fBTx\fR method \fBCommitOk\fR, which is a synchronous method.
.PP
This method confirms to the client that the commit succeeded. Note that if a commit fails, the server raises a channel exception.
.PP
This class has no fields nor accessors.
.SS "Net::AMQP::Protocol::Tx::Rollback"
.IX Subsection "Net::AMQP::Protocol::Tx::Rollback"
This class implements the class \fBTx\fR method \fBRollback\fR, which is a synchronous method.
.PP
This method abandons all messages published and acknowledged in the current transaction. A new transaction starts immediately after a rollback.
.PP
This class has no fields nor accessors.
.SS "Net::AMQP::Protocol::Tx::RollbackOk"
.IX Subsection "Net::AMQP::Protocol::Tx::RollbackOk"
This class implements the class \fBTx\fR method \fBRollbackOk\fR, which is a synchronous method.
.PP
This method confirms to the client that the rollback succeeded. Note that if an rollback fails, the server raises a channel exception.
.PP
This class has no fields nor accessors.
.SS "Net::AMQP::Protocol::Dtx::Select"
.IX Subsection "Net::AMQP::Protocol::Dtx::Select"
This class implements the class \fBDtx\fR method \fBSelect\fR, which is a synchronous method.
.PP
This method sets the channel to use distributed transactions. The client must use this method at least once on a channel before using the Start method.
.PP
This class has no fields nor accessors.
.SS "Net::AMQP::Protocol::Dtx::SelectOk"
.IX Subsection "Net::AMQP::Protocol::Dtx::SelectOk"
This class implements the class \fBDtx\fR method \fBSelectOk\fR, which is a synchronous method.
.PP
This method confirms to the client that the channel was successfully set to use distributed transactions.
.PP
This class has no fields nor accessors.
.SS "Net::AMQP::Protocol::Dtx::Start"
.IX Subsection "Net::AMQP::Protocol::Dtx::Start"
This class implements the class \fBDtx\fR method \fBStart\fR, which is a synchronous method.
.PP
This method starts a new distributed transaction. This must be the first method on a new channel that uses the distributed transaction mode, before any methods that publish or consume messages.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIdtx_identifier\fR (type: shortstr)" 4
.IX Item "dtx_identifier (type: shortstr)"
Transaction identifier
.Sp
The distributed transaction key. This identifies the transaction so that the \s-1AMQP\s0 server can coordinate with the distributed transaction coordinator.
.SS "Net::AMQP::Protocol::Dtx::StartOk"
.IX Subsection "Net::AMQP::Protocol::Dtx::StartOk"
This class implements the class \fBDtx\fR method \fBStartOk\fR, which is a synchronous method.
.PP
This method confirms to the client that the transaction started. Note that if a start fails, the server raises a channel exception.
.PP
This class has no fields nor accessors.
.SS "Net::AMQP::Protocol::Tunnel::Request"
.IX Subsection "Net::AMQP::Protocol::Tunnel::Request"
This class implements the class \fBTunnel\fR method \fBRequest\fR, which is an asynchronous method.
.PP
This method tunnels a block of binary data, which can be an encoded \s-1AMQP\s0 method or other data. The binary data is sent as the content for the Tunnel.Request method.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fImeta_data\fR (type: table)" 4
.IX Item "meta_data (type: table)"
Meta data for the tunnelled block
.Sp
This field table holds arbitrary meta-data that the sender needs to pass to the recipient.
.SS "Net::AMQP::Protocol::Tunnel::ContentHeader"
.IX Subsection "Net::AMQP::Protocol::Tunnel::ContentHeader"
This class implements the class \fBTunnel\fR method \fBContentHeader\fR, which is an asynchronous method.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIheaders\fR (type: table)" 4
.IX Item "headers (type: table)"
.PD 0
.IP "\fIproxy_name\fR (type: shortstr)" 4
.IX Item "proxy_name (type: shortstr)"
.IP "\fIdata_name\fR (type: shortstr)" 4
.IX Item "data_name (type: shortstr)"
.IP "\fIdurable\fR (type: octet)" 4
.IX Item "durable (type: octet)"
.IP "\fIbroadcast\fR (type: octet)" 4
.IX Item "broadcast (type: octet)"
.PD
.SS "Net::AMQP::Protocol::Test::Integer"
.IX Subsection "Net::AMQP::Protocol::Test::Integer"
This class implements the class \fBTest\fR method \fBInteger\fR, which is a synchronous method.
.PP
This method tests the peer's capability to correctly marshal integer data.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIinteger_1\fR (type: octet)" 4
.IX Item "integer_1 (type: octet)"
Octet test value
.Sp
An octet integer test value.
.IP "\fIinteger_2\fR (type: short)" 4
.IX Item "integer_2 (type: short)"
Short test value
.Sp
A short integer test value.
.IP "\fIinteger_3\fR (type: long)" 4
.IX Item "integer_3 (type: long)"
Long test value
.Sp
A long integer test value.
.IP "\fIinteger_4\fR (type: longlong)" 4
.IX Item "integer_4 (type: longlong)"
Long-long test value
.Sp
A long long integer test value.
.IP "\fIoperation\fR (type: octet)" 4
.IX Item "operation (type: octet)"
Operation to test
.Sp
The client must execute this operation on the provided integer test fields and return the result.
.SS "Net::AMQP::Protocol::Test::IntegerOk"
.IX Subsection "Net::AMQP::Protocol::Test::IntegerOk"
This class implements the class \fBTest\fR method \fBIntegerOk\fR, which is a synchronous method.
.PP
This method reports the result of an Integer method.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIresult\fR (type: longlong)" 4
.IX Item "result (type: longlong)"
Result value
.Sp
The result of the tested operation.
.SS "Net::AMQP::Protocol::Test::String"
.IX Subsection "Net::AMQP::Protocol::Test::String"
This class implements the class \fBTest\fR method \fBString\fR, which is a synchronous method.
.PP
This method tests the peer's capability to correctly marshal string data.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIstring_1\fR (type: shortstr)" 4
.IX Item "string_1 (type: shortstr)"
Short string test value
.Sp
An short string test value.
.IP "\fIstring_2\fR (type: longstr)" 4
.IX Item "string_2 (type: longstr)"
Long string test value
.Sp
A long string test value.
.IP "\fIoperation\fR (type: octet)" 4
.IX Item "operation (type: octet)"
Operation to test
.Sp
The client must execute this operation on the provided string test fields and return the result.
.SS "Net::AMQP::Protocol::Test::StringOk"
.IX Subsection "Net::AMQP::Protocol::Test::StringOk"
This class implements the class \fBTest\fR method \fBStringOk\fR, which is a synchronous method.
.PP
This method reports the result of a String method.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIresult\fR (type: longstr)" 4
.IX Item "result (type: longstr)"
Result value
.Sp
The result of the tested operation.
.SS "Net::AMQP::Protocol::Test::Table"
.IX Subsection "Net::AMQP::Protocol::Test::Table"
This class implements the class \fBTest\fR method \fBTable\fR, which is a synchronous method.
.PP
This method tests the peer's capability to correctly marshal field table data.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fItable\fR (type: table)" 4
.IX Item "table (type: table)"
Field table of test values
.Sp
A field table of test values.
.IP "\fIinteger_op\fR (type: octet)" 4
.IX Item "integer_op (type: octet)"
Operation to test on integers
.Sp
The client must execute this operation on the provided field table integer values and return the result.
.IP "\fIstring_op\fR (type: octet)" 4
.IX Item "string_op (type: octet)"
Operation to test on strings
.Sp
The client must execute this operation on the provided field table string values and return the result.
.SS "Net::AMQP::Protocol::Test::TableOk"
.IX Subsection "Net::AMQP::Protocol::Test::TableOk"
This class implements the class \fBTest\fR method \fBTableOk\fR, which is a synchronous method.
.PP
This method reports the result of a Table method.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIinteger_result\fR (type: longlong)" 4
.IX Item "integer_result (type: longlong)"
Integer result value
.Sp
The result of the tested integer operation.
.IP "\fIstring_result\fR (type: longstr)" 4
.IX Item "string_result (type: longstr)"
String result value
.Sp
The result of the tested string operation.
.SS "Net::AMQP::Protocol::Test::Content"
.IX Subsection "Net::AMQP::Protocol::Test::Content"
This class implements the class \fBTest\fR method \fBContent\fR, which is a synchronous method.
.PP
This method tests the peer's capability to correctly marshal content.
.PP
This class has no fields nor accessors.
.SS "Net::AMQP::Protocol::Test::ContentOk"
.IX Subsection "Net::AMQP::Protocol::Test::ContentOk"
This class implements the class \fBTest\fR method \fBContentOk\fR, which is a synchronous method.
.PP
This method reports the result of a Content method. It contains the content checksum and echoes the original content as provided.
.PP
Each of the following represents a field in the specification. These are the optional arguments to \fB\f(BInew()\fB\fR and are also read/write accessors:
.IP "\fIcontent_checksum\fR (type: long)" 4
.IX Item "content_checksum (type: long)"
Content hash
.Sp
The 32\-bit checksum of the content, calculated by adding the content into a 32\-bit accumulator.
