.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Type::Tiny::Manual::UsingWithOther 3"
.TH Type::Tiny::Manual::UsingWithOther 3 "2014-04-02" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Type::Tiny::Manual::UsingWithOther \- how to use Type::Tiny and Type::Library with other OO frameworks
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "Class::InsideOut"
.IX Subsection "Class::InsideOut"
You want Class::InsideOut 1.13 or above, which has support for blessed
and overloaded objects (including Type::Tiny type constraints) for the
\&\f(CW\*(C`get_hook\*(C'\fR and \f(CW\*(C`set_hook\*(C'\fR options.
.PP
.Vb 2
\&   {
\&      package Person;
\&      
\&      use Class::InsideOut qw( public );
\&      use Types::Standard qw( Str Int );
\&      use Type::Utils qw( declare as where inline_as coerce from );
\&      
\&      public name => my %_name, {
\&         set_hook => Str,
\&      };
\&      
\&      my $PositiveInt = declare
\&         as        Int,
\&         where     {  $_ > 0  },
\&         inline_as { "$_ =~ /^[0\-9]\e$/ and $_ > 0" };
\&      
\&      coerce $PositiveInt, from Int, q{ abs $_ };
\&      
\&      public age => my %_age, {
\&         set_hook => sub { $_ = $PositiveInt\->assert_coerce($_) },
\&      };
\&      
\&      sub get_older {
\&         my $self = shift;
\&         my ($years) = @_;
\&         $PositiveInt\->assert_valid($years);
\&         $self\->_set_age($self\->age + $years);
\&      }
\&   }
.Ve
.PP
I probably need to make coercions a little prettier.
.PP
\&\fBSee also:\fR \f(CW\*(C`t/25_accessor_hooks_typetiny.t\*(C'\fR and
\&\f(CW\*(C`t/Object/HookedTT.pm\*(C'\fR in the Class::InsideOut test suite; and the
Class-InsideOut integration tests <https://github.com/tobyink/p5-type-tiny/tree/master/t/30-integration/Class-InsideOut>
in the Type::Tiny test suite.
.SS "Params::Check and Object::Accessor"
.IX Subsection "Params::Check and Object::Accessor"
The Params::Check \f(CW\*(C`allow()\*(C'\fR function, the \f(CW\*(C`allow\*(C'\fR option for the
Params::Check \f(CW\*(C`check()\*(C'\fR function, and the input validation mechanism
for Object::Accessor all work in the same way, which is basically a
limited pure-Perl implementation of the smart match operator. While this
doesn't directly support Type::Tiny constraints, it does support coderefs.
You can use Type::Tiny's \f(CW\*(C`compiled_check\*(C'\fR method to obtain a suitable
coderef.
.PP
\&\fBParam::Check example:\fR
.PP
.Vb 6
\&   my $tmpl = {
\&      name => { allow => Str\->compiled_check },
\&      age  => { allow => Int\->compiled_check },
\&   };
\&   check($tmpl, { name => "Bob", age => 32 })
\&      or die Params::Check::last_error();
.Ve
.PP
\&\fBObject::Accessor example:\fR
.PP
.Vb 5
\&   my $obj = Object::Accessor\->new;
\&   $obj\->mk_accessors(
\&      { name => Str\->compiled_check },
\&      { age  => Int\->compiled_check },
\&   );
.Ve
.PP
\&\fBCaveat:\fR Object::Accessor doesn't die when a value fails to meet its
type constraint; instead it outputs a warning to \s-1STDERR.\s0 This behaviour can
be changed by setting \f(CW\*(C`$Object::Accessor::FATAL = 1\*(C'\fR.
.PP
\&\fBSee also:\fR The
Object-Accessor integration tests <https://github.com/tobyink/p5-type-tiny/tree/master/t/30-integration/Object-Accessor>
in the Type::Tiny test suite.
.SS "Validation::Class::Simple"
.IX Subsection "Validation::Class::Simple"
You want Validation::Class::Simple 7.900017 or above.
.PP
The \f(CW\*(C`to_TypeTiny\*(C'\fR function from Types::TypeTiny can be used to create
a Type::Tiny type constraint from a Validation::Class::Simple object (and
probably from Validation::Class, but this is untested).
.PP
.Vb 2
\&   use Types::TypeTiny qw( to_TypeTiny );
\&   use Validation::Class::Simple;
\&   
\&   my $type = to_TypeTiny Validation::Class::Simple\->new(
\&      fields => {
\&         name => {
\&            required => 1,
\&            pattern  => qr{^\ew+(\es\ew+)*$},
\&            filters  => ["trim", "strip"],
\&         },
\&         email => { required => 1, email => 1 },
\&         pass  => { required => 1, min_length => 6 },
\&      },
\&   );
\&   
\&   # true
\&   $type\->check({
\&      name   => "Toby Inkster",
\&      email  => "tobyink@cpan.org",
\&      pass   => "foobar",
\&   });
\&   
\&   # false
\&   $type\->check({
\&      name   => "Toby Inkster ",    # trailing whitespace
\&      email  => "tobyink@cpan.org",
\&      pass   => "foobar",
\&   });
\&   
\&   # coercion from HashRef uses the filters defined above
\&   my $fixed = $type\->coerce({
\&      name   => "Toby Inkster ",    # trailing whitespace
\&      email  => "tobyink@cpan.org",
\&      pass   => "foobar",
\&   });
\&   
\&   # true
\&   $type\->check($fixed);
.Ve
.PP
Type constraints built with Validation::Class::Simple are not inlinable, so
won't be as fast as \f(CW\*(C`Dict\*(C'\fR from Types::Standard, but the filters are a
pretty useful feature. (Note that filters are explicitly \fIignored\fR for type
constraint checking, and only come into play for coercion.)
.PP
\&\fBSee also:\fR The
Validation-Class-Simple integration tests <https://github.com/tobyink/p5-type-tiny/tree/master/t/30-integration/Validation-Class-Simple>
in the Type::Tiny test suite.
.SH "AUTHOR"
.IX Header "AUTHOR"
Toby Inkster <tobyink@cpan.org>.
.SH "COPYRIGHT AND LICENCE"
.IX Header "COPYRIGHT AND LICENCE"
This software is copyright (c) 2013\-2014 by Toby Inkster.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
.SH "DISCLAIMER OF WARRANTIES"
.IX Header "DISCLAIMER OF WARRANTIES"
\&\s-1THIS PACKAGE IS PROVIDED \*(L"AS IS\*(R" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.\s0
