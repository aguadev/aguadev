.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "AnyEvent::FAQ 3"
.TH AnyEvent::FAQ 3 "2012-04-04" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
AnyEvent::FAQ \- frequently asked questions
.PP
The newest version of this document can be found at
<http://pod.tst.eu/http://cvs.schmorp.de/AnyEvent/lib/AnyEvent/FAQ.pod>.
.SS "My program exits before doing anything, what's going on?"
.IX Subsection "My program exits before doing anything, what's going on?"
Programmers new to event-based programming often forget that you can
actually do other stuff while \*(L"waiting\*(R" for an event to occur and
therefore forget to actually wait when they do not, in fact, have anything
else to do.
.PP
Here is an example:
.PP
.Vb 1
\&   use AnyEvent;
\&
\&   my $timer = AnyEvent\->timer (after => 5, cb => sub { say "hi" });
.Ve
.PP
The expectation might be for the program to print \*(L"hi\*(R" after 5 seconds
and then probably to exit. However, if you run this, your program will
exit almost instantly: Creating the timer does not wait for it, instead
the \f(CW\*(C`timer\*(C'\fR method returns immediately and perl executes the rest of the
program. But there is nothing left to execute, so perl exits.
.PP
To force AnyEvent to wait for something, use a condvar:
.PP
.Vb 1
\&   use AnyEvent;
\&
\&   my $quit_program = AnyEvent\->condvar;
\&   my $timer = AnyEvent\->timer (after => 5, cb => sub { $quit_program\->send });
\&
\&   $quit_program\->recv;
.Ve
.PP
Here the program doesn't immediately exit, because it first waits for
the \*(L"quit_program\*(R" condition.
.PP
In most cases, your main program should call the event library \*(L"loop\*(R"
function directly:
.PP
.Vb 2
\&   use EV;
\&   use AnyEvent;
\&
\&   ...
\&
\&   EV::loop;
.Ve
.ie n .SS "Why is my ""tcp_connect"" callback never called?"
.el .SS "Why is my \f(CWtcp_connect\fP callback never called?"
.IX Subsection "Why is my tcp_connect callback never called?"
Tricky: \f(CW\*(C`tcp_connect\*(C'\fR (and a few other functions in AnyEvent::Socket)
is critically sensitive to the caller context.
.PP
In void context, it will just do its thing and eventually call the
callback. In any other context, however, it will return a special \*(L"guard\*(R"
object \- when it is destroyed (e.g. when you don't store it but throw it
away), tcp_connect will no longer try to connect or call any callbacks.
.PP
Often this happens when the \f(CW\*(C`tcp_connect\*(C'\fR call is at the end of a function:
.PP
.Vb 5
\&   sub do_connect {
\&      tcp_connect "www.example.com", 80, sub {
\&         ... lengthy code
\&      };
\&   }
.Ve
.PP
Then the caller decides whether there is a void context or not. One can
avoid these cases by explicitly returning nothing:
.PP
.Vb 4
\&   sub do_connect {
\&      tcp_connect "www.example.com", 80, sub {
\&         ... lengthy code
\&      };
\&
\&      () # return nothing
\&   }
.Ve
.ie n .SS "Why do some backends use a lot of \s-1CPU\s0 in ""AE::cv\->recv""?"
.el .SS "Why do some backends use a lot of \s-1CPU\s0 in \f(CWAE::cv\->recv\fP?"
.IX Subsection "Why do some backends use a lot of CPU in AE::cv->recv?"
Many people try out this simple program, or its equivalent:
.PP
.Vb 2
\&   use AnyEvent;
\&   AnyEvent\->condvar\->recv;
.Ve
.PP
They are then shocked to see that this basically idles with the Perl
backend, but uses 100% \s-1CPU\s0 with the \s-1EV\s0 backend, which is supposed to be
sooo efficient.
.PP
The key to understand this is to understand that the above program
is actually \fIbuggy\fR: Nothing calls \f(CW\*(C`\->send\*(C'\fR on the condvar,
ever. Worse, there are no event watchers whatsoever. Basically, it creates
a deadlock: there is no way to make progress, this program doesn't do
anything useful, and this will not change in the future: it is already an
ex-parrot.
.PP
Some backends react to this by freezing, some by idling, and some do a
100% \s-1CPU\s0 loop.
.PP
Since this program is not useful (and behaves as documented with all
backends, as AnyEvent makes no \s-1CPU\s0 time guarantees), this shouldn't be a
big deal: as soon as your program actually implements \fIsomething\fR, the
\&\s-1CPU\s0 usage will be normal.
.SS "Why does this \s-1FAQ\s0 not deal with AnyEvent::Handle questions?"
.IX Subsection "Why does this FAQ not deal with AnyEvent::Handle questions?"
Because AnyEvent::Handle has a \s-1NONFAQ\s0 on its own that already deals
with common issues.
.SS "How can I combine Win32::GUI applications with AnyEvent?"
.IX Subsection "How can I combine Win32::GUI applications with AnyEvent?"
Well, not in the same \s-1OS\s0 thread, that's for sure :) What you can do is
create another ithread (or fork) and run AnyEvent inside that thread, or
better yet, run all your \s-1GUI\s0 code in a second ithread.
.PP
For example, you could load Win32::GUI and AnyEvent::Util, then
create a portable socketpair for \s-1GUI\-\s0>AnyEvent communication.
.PP
Then fork/create a new ithread, in there, create a Window and send the \f(CW\*(C`$WINDOW\->{\-Handle}\*(C'\fR to the AnyEvent ithread so it can \f(CW\*(C`PostMessage\*(C'\fR.
.PP
\&\s-1GUI\s0 to AnyEvent communication could work by pushing some data into a
Thread::Queue and writing a byte into the socket. The AnyEvent watcher
on the other side will then look at the queue.
.PP
AnyEvent to \s-1GUI\s0 communications can also use a Thread::Queue, but to
wake up the \s-1GUI\s0 thread, it would instead use \f(CW\*(C`Win32::GUI::PostMessage
$WINDOW, 1030, 0, ""\*(C'\fR, and the \s-1GUI\s0 thread would listen for these
messages by using \f(CW\*(C`$WINDOW\->Hook (1030 (), sub { ... })\*(C'\fR.
.SS "My callback dies and..."
.IX Subsection "My callback dies and..."
It must not \- part of the contract betwene AnyEvent and user code is that
callbacks do not throw exceptions (and don't do even more evil things,
such as using \f(CW\*(C`last\*(C'\fR outside a loop :). If your callback might die
sometimes, you need to use \f(CW\*(C`eval\*(C'\fR.
.PP
If you want to track down such a case and you can reproduce it, you can
enable wrapping (by calling \f(CW\*(C`AnyEvent::Debug::wrap\*(C'\fR or by setting
\&\f(CW\*(C`PERL_ANYEVENT_DEBUG_WRAP=1\*(C'\fR before starting your program). This will
wrap every callback into an eval and will report any exception complete
with a backtrace and some information about which watcher died, where it
was created and so on.
.SH "Author"
.IX Header "Author"
Marc Lehmann <schmorp@schmorp.de>.
